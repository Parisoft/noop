/* 
 * <p>FamiTone2 audio library v1.15 by Shiru 04'17</p>
 * 
 * <h2>About</h2>
 * 
 * <p>FamiTone2 is an audio library for NES/Famicom. It is designed to provide 
 * easy way of adding music and sound effects into homebrew games and demos. </p>
 * 
 * <p>It supports all standard channels of 2A03: two pulse, triangle, noise, and DPCM. Expansion sound chips are not supported.</p>
 * 
 * <p>The main concept of the library is to have very minimalistic set of features that is sufficient to create music and sound effects 
 * with the level of quality comparable with that of the most old commercial NES games. It is in no way a direct replacement of FamiTracker 
 * player, it only supports a very limited subset of its features in order to reduce CPU load and memory use. That's the whole point of having 
 * a separate library, so if you need more features, you should stick to the native FamiTracker's driver instead.
 * 
 * <h2>How to create music</h2>
 * 
 * <p>You can create music in FamiTracker version 0.3.6 or above, or with 
 * Musetracker. The music should met these requirements:</p> 
 * <ul>
 * <li>Allowed notes are C-1..D-6, Note Cut (rest note)</li>
 * <li>Only Volume, Arpeggio, and Pitch sequences (no Pitch for noise
 *   channel) supported</li>
 * <li>All instruments should have a volume envelope assigned</li>
 * <li>Only the loop part of sequence is supported, release part is not supported</li>
 * <li>Pitch envelope accumulate the offset at conversion time only, thus
 *   it can't go further -64..63, and can't accumulate the offset with loop</li>
 * <li>Only first step of Duty envelope for pulse and noise channels is used,
 *   there is no Duty sequence</li>
 * <li>64 instruments max</li>
 * <li>No volume column support</li>
 * <li>Tempo is set with the global setting, speed can be changed with effect
 *   Fxx (1..21)</li>
 * <li>Bxx effect for looping without an intro, does not support forward
 *   references</li>
 * <li>D00 effect to cut patterns early</li>
 * <li>No effects other than listed above are supported</li>
 * <li>Up to 17 sub songs in a file, they will share instruments and pattern
 *   data</li>
 * </ul>
 * 
 * <p>You can use DPCM samples, there are limitations too:</p>
 * 
 * <ul>
 * <li>Up to 63 samples with total size of ~16K</li>
 * <li>Only samples assigned to the instrument 0 are supported,</li>
 * <li>Note range the same as for normal instruments, C-1..D-6, instrument
 *   number is ignored</li>
 * <li>You can add samples that aren't used in the music to use them as sound
 *   effects</li>
 * </ul>
 * 
 * <p>You can create all music for your game in a single FTM file using the 
 * multi song feature, this will save memory. If allowed number of 
 * instruments or sub songs is not enough, you can split the music into few 
 * files. The library allows to change music data sets at runtime.</p>
 * 
 * <p>After you have made the music, you need to export it in a text format 
 * supported by the FamiTone2 converter: text2data available at 
 * <a href="https://shiru.untergrund.net/code.shtml">Shiru's page</a>.</p> 
 * 
 * <p>In FamiTracker 0.4.2 or above you can use built-in text exporter, it is 
 * located in File\Export text. This export option is also available from 
 * the command line (FamiTracker music.ftm -export music.txt). This allows 
 * seamless integration of music conversion into your build process. The 
 * old text format exported with TextExporter.dll plug-in is also 
 * supported, but not recommended to use.</p> 
 * 
 * <p>In Musetracker you can just save it in needed format with LCtrl+LShift+S 
 * (by default).</p> 
 * 
 * <p>Now you can use text2data tool (text2data music.txt) to convert the 
 * exported text into assembly file with music data. If you don't use DPCM, 
 * you'll get one *.asm file as the result. If you use DPCM, there will be 
 * an extra *.dmc file with sample data.</p> 
 * 
 * <p>text2data outputs data in NESASM format by default, you must use -asm6 
 * option to get output in ASM6 format.</p> 
 * 
 * <h2>How to create sound effects</h2>
 * 
 * <p>Sound effects could be created in FamiTracker or Musetracker as well. 
 * Effects can use all sound channels except DPCM, so the effects are multi 
 * channel. Put every effect into a separate sub song using the multi song 
 * feature. Unlike music, you can use most of the FamiTracker features for 
 * effects, except the sweep. Every effect should be finished with silence, 
 * and C00 command put to the last row of the effect.</p>
 * 
 * <p>Once all effects done, export them as a NSF file and use the nsf2data
 * converter (nsf2data sounds.nsf). You'll get *.asm file with the effects
 * data.</p> 
 * 
 * <p>There is a major limitation: one effect can't be larger than 255 bytes 
 * after conversion. FamiTracker effects like slides could increase the 
 * size greatly, so use them carefully. The converter will report size of 
 * each effect, and warn you if an effect is too large.</p> 
 * 
 * <p>In addition to these sound effects, you can play any sample,meither used 
 * or not used in the music, from the current DPCM bank. It will have 
 * priority over samples in the music, overriding them.</p> 
 *  
 * <h2>How to play Music</h2>
 * 
 * <ol>
 * <li>Invoke <b>$openMusic()</b> to load your music</li>
 * <li>Invoke <b>$playMusic()</b> to start playing your music</li>
 * <li>Invoke <b>$update()</b> every TV frame, usually in the end of the NMI handler</li>
 * <li>Invoke <b>$pauseMusic()</b> to pause your playing music</li>
 * <li>Invoke <b>$resumeMusic()</b> to resume your paused music</li>
 * <li>Invoke <b>$stopMusic()</b> to stop playing your music</li>
 * </ol>
 * 
 * <h2>How to play Sound Effects (SFX):</h2>
 * 
 * <ol>
 * <li>Invoke <b>$openSfx()</b> to load yours SFXs</li>
 * <li>Invoke <b>$playSfx()</b> to play your effect</li>
 * <li>Invoke <b>$update()</b> every TV frame, usually in the end of the NMI handler</li>
 * </ol>
 * 
 * <h2>How to play DPCM/DCM/DMC samples</h2>
 * <ol>
 * <li>Invoke <b>$playDcmSample()</b> to play your sample with high priority</li>
 * <li>Invoke <b>$update()</b> every TV frame, usually in the end of the NMI handler</li>
 * </ol>
 * 
 * <h2>Note:</h2>
 * <p>This class is indented to be used in a NTSC region game.</p>
 * 
 * <p>Many thanks to Shiru who's brought to life this awesome library.</p> */
FamiTone2NTSC extends FamiTone2 {

	/*
	 * <h2>Warning:</h2>
	 * <p>This method is intended to be invoked directly from <i>FamiTone2</i> for a multi region game.</p>
	 * <p>For a NTSC game call <i>FamiTone2NTSC.$openMusic(music)</i> instead.</p>
	 */
	$openMusic(Byte region, Byte[] music) {
		$openMusic(music)
	}

	/*
	 * <p>Open a music file for further play</p>
	 * 
	 * <h2>Example:</h2>
	 * <code>
	 * $someMusics @PRG-ROM : "file://some-musics.asm"<br>
	 * <br>
	 * // somewhere in the code<br>
	 * FamiTone2NTSC.$openMusic($someMusics)<br>
	 * ...<br>
	 * FamiTone2NTSC.$playMusic(0) // plays the 1st track in the recent opened music file<br>
	 * </code>
	 * 
	 * <h2>Parameters:</h2>
	 * <ul>
	 * <li><b>music</b>: the music file to be opened</li>
	 * </ul>	 */
	$openMusic(Byte[] music) {
		!	LDA ?music?             ;store music data pointer for further use                    !
		!	STA ?_$FT_SONG_LIST_L?                                                                !
		!	STA ?_$ftTempPtr?                                                                     !
		!	LDA ?music? + 1                                                                      !
		!	STA ?_$FT_SONG_LIST_H?                                                                !
		!	STA ?_$ftTempPtr? + 1                                                                 !
		!                                                                                        !
		!	;initialize channels and envelopes                                                   !
		$stopMusic()
		!                                                                                        !
		!	ldy #1                                                                               !
		!	lda (?_$ftTempPtr?),y		;get instrument list address                             !
		!	sta ?_$FT_INSTRUMENT_L?                                                                  !
		!	iny                                                                                  !
		!	lda (?_$ftTempPtr?),y                                                                  !
		!	sta ?_$FT_INSTRUMENT_H?                                                                  !
		!	iny                                                                                  !
		!	lda (?_$ftTempPtr?),y		;get sample list address                                     !
		!	sta ?_$FT_DPCM_LIST_L?                                                                   !
		!	iny                                                                                  !
		!	lda (?_$ftTempPtr?),y                                                                  !
		!	sta ?_$FT_DPCM_LIST_H?                                                                   !
		!                                                                                        !
		!	lda #$ff				;previous pulse period MSB, to not write it when not changed !
		!	sta ?_$FT_PULSE1_PREV?                                                                   !
		!	sta ?_$FT_PULSE2_PREV?                                                                   !
		!                                                                                        !
		!	lda #$0f				;enable channels, stop DMC                                   !
		!	sta ?_$APU_SND_CHN?                                                                      !
		!	lda #$80				;disable triangle length counter                             !
		!	sta ?_$APU_TRI_LINEAR?                                                                   !
		!	lda #$00				;load noise length                                           !
		!	sta ?_$APU_NOISE_HI?                                                                     !
		!                                                                                        !
		!	lda #$30				;volumes to 0                                                !
		!	sta ?_$APU_PL1_VOL?                                                                      !
		!	sta ?_$APU_PL2_VOL?                                                                      !
		!	sta ?_$APU_NOISE_VOL?                                                                    !
		!	lda #$08				;no sweep                                                    !
		!	sta ?_$APU_PL1_SWEEP?                                                                    !
		!	sta ?_$APU_PL2_SWEEP?                                                                    !
		!                                                                                        !
		$stopMusic()
	}

	/*
	 * <p>Play a music</p>
	 * 
	 * <h2>Example:</h2>
	 * <code>
	 * $someMusics @PRG-ROM : "file://some-musics.asm"<br>
	 * <br>
	 * // somewhere in the code<br>
	 * FamiTone2NTSC.$openMusic($someMusics)<br>
	 * ...<br>
	 * FamiTone2NTSC.$playMusic(0) // plays the 1st track in the recent opened music file<br>
	 * </code>
	 * 
	 * <h2>Parameters:</h2>
	 * <ul>
	 * <li><b>track</b>: song number to play</li>
	 * </ul>	 */
	$playMusic(Byte track) {
		!	LDA ?track?                                                           !
		!	ldx ?_$FT_SONG_LIST_L?                                                    !
		!	stx ?_$ftTempPtr? + 0                                                    !
		!	ldx ?_$FT_SONG_LIST_H?                                                    !
		!	stx ?_$ftTempPtr? + 1                                                    !
		!                                                                         !
		!	ldy #0                                                                !
		!	cmp (?_$ftTempPtr?),y		;check if there is such sub song              !
		!	bcs @skip                                                             !
		!                                                                         !
		!	asl a					;multiply song number by 14                   !
		!	sta ?_$ftTempPtr? + 0		;use pointer LSB as temp variable             !
		!	asl a                                                                 !
		!	tax                                                                   !
		!	asl a                                                                 !
		!	adc ?_$ftTempPtr? + 0                                                    !
		!	stx ?_$ftTempPtr? + 0                                                    !
		!	adc ?_$ftTempPtr? + 0                                                    !
		!	adc #5					;add offset                                   !
		!	tay                                                                   !
		!                                                                         !
		!	lda ?_$FT_SONG_LIST_L?		;restore pointer LSB                          !
		!	sta ?_$ftTempPtr? + 0                                                    !
		!                                                                         !
		!	;stop music, initialize channels and envelopes                        !
		$stopMusic()
		!                                                                         !
		!	ldx #<(?_$FT_CHANNELS?)	;initialize channel structures                    !
		!                                                                         !
		!@set_channels:                                                           !
		!                                                                         !
		!	lda (?_$ftTempPtr?),y		;read channel pointers                        !
		!	sta ?_$FT_CHN_PTR_L?,x                                                    !
		!	iny                                                                   !
		!	lda (?_$ftTempPtr?),y                                                   !
		!	sta ?_$FT_CHN_PTR_H?,x                                                    !
		!	iny                                                                   !
		!                                                                         !
		!	lda #0                                                                !
		!	sta ?_$FT_CHN_REPEAT?,x                                                   !
		!	sta ?_$FT_CHN_INSTRUMENT?,x                                               !
		!	sta ?_$FT_CHN_NOTE?,x                                                     !
		!	sta ?_$FT_CHN_REF_LEN?,x                                                  !
		!	lda #$30                                                              !
		!	sta ?_$FT_CHN_DUTY?,x                                                     !
		!                                                                         !
		!	inx						;next channel                                 !
		!	cpx #<(?_$FT_CHANNELS?) + ?_$FT_CHANNELS_ALL?                                   !
		!	bne @set_channels                                                     !
		!                                                                         !
		!                                                                         !
		!	iny                                                                   !
		!	iny                                                                   !
		!@pal:                                                                    !
		!                                                                         !
		!	lda (?_$ftTempPtr?),y		;read the tempo step                          !
		!	sta ?_$FT_TEMPO_STEP_L?                                                   !
		!	iny                                                                   !
		!	lda (?_$ftTempPtr?),y                                                   !
		!	sta ?_$FT_TEMPO_STEP_H?                                                   !
		!                                                                         !
		!                                                                         !
		!	lda #0					;reset tempo accumulator                      !
		!	sta ?_$FT_TEMPO_ACC_L?                                                    !
		!	lda #6					;default speed                                !
		!	sta ?_$FT_TEMPO_ACC_H?                                                    !
		!	sta ?_$FT_SONG_SPEED?		;apply default speed, this also enables music !
		!                                                                         !
		!@skip:                                                                   !
	}
	
	/*
	 * <p>Update FamiTone2NTSC state, should be called every NMI</p>
	 * 
	 * <h2>Example:</h2>
	 * <code>
	 * $nmi() {<br>
	 * &nbsp; &nbsp; // some draw stuff<br>
	 * &nbsp; &nbsp; ...<br>
	 * &nbsp; &nbsp; // NMI is done<br>
	 * &nbsp; &nbsp; PPU.$update()<br>
	 * &nbsp; &nbsp; FamiTone2NTSC.$update()<br>
	 * }
	 * </code>	 */
	$update() {
		!	.ifdef ?_$FT_THREAD?                                                                                  !
		!	lda ?_$ftTempPtr? + 0                                                                                 !
		!	pha                                                                                               !
		!	lda ?_$ftTempPtr? + 1                                                                                 !
		!	pha                                                                                               !
		!	.endif                                                                                            !
		!                                                                                                     !
		!	lda ?_$FT_SONG_SPEED?		;speed 0 means that no music is playing currently                         !
		!	bmi @pause				;bit 7 set is the pause flag                                              !
		!	bne @update                                                                                       !
		!@pause:                                                                                              !
		!	jmp @update_sound                                                                                 !
		!                                                                                                     !
		!@update:                                                                                             !
		!                                                                                                     !
		!	clc						;update frame counter that considers speed, tempo, and PAL/NTSC           !
		!	lda ?_$FT_TEMPO_ACC_L?                                                                                !
		!	adc ?_$FT_TEMPO_STEP_L?                                                                               !
		!	sta ?_$FT_TEMPO_ACC_L?                                                                                !
		!	lda ?_$FT_TEMPO_ACC_H?                                                                                !
		!	adc ?_$FT_TEMPO_STEP_H?                                                                               !
		!	cmp ?_$FT_SONG_SPEED?                                                                                 !
		!	bcs @update_row			;overflow, row update is needed                                           !
		!	sta ?_$FT_TEMPO_ACC_H?		;no row update, skip to the envelopes update                              !
		!	jmp @update_envelopes                                                                             !
		!                                                                                                     !
		!@update_row:                                                                                         !
		!                                                                                                     !
		!	sec                                                                                               !
		!	sbc ?_$FT_SONG_SPEED?                                                                                 !
		!	sta ?_$FT_TEMPO_ACC_H?                                                                                !
		!                                                                                                     !
		!                                                                                                     !
		!	ldx #<(?_$FT_CH1_VARS?)	;process channel 1                                                            !
		_$FT2ChannelUpdate()
		!	bcc @no_new_note1                                                                                 !
		!	ldx #<(?_$FT_CH1_ENVS?)                                                                               !
		!	lda ?_$FT_CH1_INSTRUMENT?                                                                             !
		_$FT2SetInstrument()
		!	sta ?_$FT_CH1_DUTY?                                                                                   !
		!@no_new_note1:                                                                                       !
		!                                                                                                     !
		!	ldx #<(?_$FT_CH2_VARS?)	;process channel 2                                                            !
		_$FT2ChannelUpdate()
		!	bcc @no_new_note2                                                                                 !
		!	ldx #<(?_$FT_CH2_ENVS?)                                                                               !
		!	lda ?_$FT_CH2_INSTRUMENT?                                                                             !
		_$FT2SetInstrument()
		!	sta ?_$FT_CH2_DUTY?                                                                                   !
		!@no_new_note2:                                                                                       !
		!                                                                                                     !
		!	ldx #<(?_$FT_CH3_VARS?)	;process channel 3                                                            !
		_$FT2ChannelUpdate()
		!	bcc @no_new_note3                                                                                 !
		!	ldx #<(?_$FT_CH3_ENVS?)                                                                               !
		!	lda ?_$FT_CH3_INSTRUMENT?                                                                             !
		_$FT2SetInstrument()
		!@no_new_note3:                                                                                       !
		!                                                                                                     !
		!	ldx #<(?_$FT_CH4_VARS?)	;process channel 4                                                            !
		_$FT2ChannelUpdate()
		!	bcc @no_new_note4                                                                                 !
		!	ldx #<(?_$FT_CH4_ENVS?)                                                                               !
		!	lda ?_$FT_CH4_INSTRUMENT?                                                                             !
		_$FT2SetInstrument()
		!	sta ?_$FT_CH4_DUTY?                                                                                   !
		!@no_new_note4:                                                                                       !
		!                                                                                                     !
		!	.ifdef ?_$FT_DPCM_ENABLE?                                                                             !
		!                                                                                                     !
		!	ldx #<(?_$FT_CH5_VARS?)	;process channel 5                                                            !
		_$FT2ChannelUpdate()
		!	bcc @no_new_note5                                                                                 !
		!	lda ?_$FT_CH5_NOTE?                                                                                   !
		!	bne @play_sample                                                                                  !
		$stopDcmSample()
		!	bne @no_new_note5		;A is non-zero after FamiToneSampleStop                                   !
		!@play_sample:                                                                                        !
		_$FamiToneSamplePlayM()
		!@no_new_note5:                                                                                       !
		!                                                                                                     !
		!	.endif                                                                                            !
		!                                                                                                     !
		!                                                                                                     !
		!@update_envelopes:                                                                                   !
		!                                                                                                     !
		!	ldx #<(?_$FT_ENVELOPES?)	;process 11 envelopes                                                     !
		!                                                                                                     !
		!@env_process:                                                                                        !
		!                                                                                                     !
		!	lda ?_$FT_ENV_REPEAT?,x		;check envelope repeat counter                                            !
		!	beq @env_read			;if it is zero, process envelope                                          !
		!	dec ?_$FT_ENV_REPEAT?,x		;otherwise decrement the counter                                          !
		!	bne @env_next                                                                                     !
		!                                                                                                     !
		!@env_read:                                                                                           !
		!                                                                                                     !
		!	lda ?_$FT_ENV_ADR_L?,x		;load envelope data address into temp                                     !
		!	sta ?_$ftTempPtr? + 0                                                                                !
		!	lda ?_$FT_ENV_ADR_H?,x                                                                                !
		!	sta ?_$ftTempPtr? + 1                                                                                !
		!	ldy ?_$FT_ENV_PTR?,x		;load envelope pointer                                                    !
		!                                                                                                     !
		!@env_read_value:                                                                                     !
		!                                                                                                     !
		!	lda (?_$ftTempPtr?),y		;read a byte of the envelope data                                         !
		!	bpl @env_special		;values below 128 used as a special code, loop or repeat                  !
		!	clc						;values above 128 are output value+192 (output values are signed -63..64) !
		!	adc #256-192                                                                                      !
		!	sta ?_$FT_ENV_VALUE?,x		;store the output value                                                   !
		!	iny						;advance the pointer                                                      !
		!	bne @env_next_store_ptr ;bra                                                                      !
		!                                                                                                     !
		!@env_special:                                                                                        !
		!                                                                                                     !
		!	bne @env_set_repeat		;zero is the loop point, non-zero values used for the repeat counter      !
		!	iny						;advance the pointer                                                      !
		!	lda (?_$ftTempPtr?),y		;read loop position                                                       !
		!	tay						;use loop position                                                        !
		!	jmp @env_read_value		;read next byte of the envelope                                           !
		!                                                                                                     !
		!@env_set_repeat:                                                                                     !
		!                                                                                                     !
		!	iny                                                                                               !
		!	sta ?_$FT_ENV_REPEAT?,x		;store the repeat counter value                                           !
		!                                                                                                     !
		!@env_next_store_ptr:                                                                                 !
		!                                                                                                     !
		!	tya						;store the envelope pointer                                               !
		!	sta ?_$FT_ENV_PTR?,x                                                                                  !
		!                                                                                                     !
		!@env_next:                                                                                           !
		!                                                                                                     !
		!	inx						;next envelope                                                            !
		!                                                                                                     !
		!	cpx #<(?_$FT_ENVELOPES?) + ?_$FT_ENVELOPES_ALL?                                                             !
		!	bne @env_process                                                                                  !
		!                                                                                                     !
		!                                                                                                     !
		!@update_sound:                                                                                       !
		!                                                                                                     !
		!	;convert envelope and channel output data into APU register values in the output buffer           !
		!                                                                                                     !
		!	lda ?_$FT_CH1_NOTE?                                                                                   !
		!	beq @ch1cut                                                                                       !
		!	clc                                                                                               !
		!	adc ?_$FT_CH1_NOTE_OFF?                                                                               !
		!	tax                                                                                               !
		!	lda ?_$FT_CH1_PITCH_OFF?                                                                              !
		!	tay                                                                                               !
		!	adc ?_$FT2NoteTableLSB?,x                                                                            !
		!	sta ?_$FT_MR_PULSE1_L?                                                                                !
		!	tya						;sign extension for the pitch offset                                      !
		!	ora #$7f                                                                                          !
		!	bmi @ch1sign                                                                                      !
		!	lda #0                                                                                            !
		!@ch1sign:                                                                                            !
		!	adc ?_$FT2NoteTableMSB?,x                                                                            !
		!                                                                                                     !
		!	.ifndef ?_$FT_SFX_ENABLE?                                                                             !
		!	cmp ?_$FT_PULSE1_PREV?                                                                                !
		!	beq @ch1prev                                                                                      !
		!	sta ?_$FT_PULSE1_PREV?                                                                                !
		!	.endif                                                                                            !
		!                                                                                                     !
		!	sta ?_$FT_MR_PULSE1_H?                                                                                !
		!@ch1prev:                                                                                            !
		!	lda ?_$FT_CH1_VOLUME?                                                                                 !
		!@ch1cut:                                                                                             !
		!	ora ?_$FT_CH1_DUTY?                                                                                   !
		!	sta ?_$FT_MR_PULSE1_V?                                                                                !
		!                                                                                                     !
		!                                                                                                     !
		!	lda ?_$FT_CH2_NOTE?                                                                                   !
		!	beq @ch2cut                                                                                       !
		!	clc                                                                                               !
		!	adc ?_$FT_CH2_NOTE_OFF?                                                                               !
		!	tax                                                                                               !
		!	lda ?_$FT_CH2_PITCH_OFF?                                                                              !
		!	tay                                                                                               !
		!	adc ?_$FT2NoteTableLSB?,x                                                                            !
		!	sta ?_$FT_MR_PULSE2_L?                                                                                !
		!	tya                                                                                               !
		!	ora #$7f                                                                                          !
		!	bmi @ch2sign                                                                                      !
		!	lda #0                                                                                            !
		!@ch2sign:                                                                                            !
		!	adc ?_$FT2NoteTableMSB?,x                                                                            !
		!                                                                                                     !
		!	.ifndef ?_$FT_SFX_ENABLE?                                                                             !
		!	cmp ?_$FT_PULSE2_PREV?                                                                                !
		!	beq @ch2prev                                                                                      !
		!	sta ?_$FT_PULSE2_PREV?                                                                                !
		!	.endif                                                                                            !
		!                                                                                                     !
		!	sta ?_$FT_MR_PULSE2_H?                                                                                !
		!@ch2prev:                                                                                            !
		!	lda ?_$FT_CH2_VOLUME?                                                                                 !
		!@ch2cut:                                                                                             !
		!	ora ?_$FT_CH2_DUTY?                                                                                   !
		!	sta ?_$FT_MR_PULSE2_V?                                                                                !
		!                                                                                                     !
		!                                                                                                     !
		!	lda ?_$FT_CH3_NOTE?                                                                                   !
		!	beq @ch3cut                                                                                       !
		!	clc                                                                                               !
		!	adc ?_$FT_CH3_NOTE_OFF?                                                                               !
		!	tax                                                                                               !
		!	lda ?_$FT_CH3_PITCH_OFF?                                                                              !
		!	tay                                                                                               !
		!	adc ?_$FT2NoteTableLSB?,x                                                                            !
		!	sta ?_$FT_MR_TRI_L?                                                                                   !
		!	tya                                                                                               !
		!	ora #$7f                                                                                          !
		!	bmi @ch3sign                                                                                      !
		!	lda #0                                                                                            !
		!@ch3sign:                                                                                            !
		!	adc ?_$FT2NoteTableMSB?,x                                                                            !
		!	sta ?_$FT_MR_TRI_H?                                                                                   !
		!	lda ?_$FT_CH3_VOLUME?                                                                                 !
		!@ch3cut:                                                                                             !
		!	ora #$80                                                                                          !
		!	sta ?_$FT_MR_TRI_V?                                                                                   !
		!                                                                                                     !
		!                                                                                                     !
		!	lda ?_$FT_CH4_NOTE?                                                                                   !
		!	beq @ch4cut                                                                                       !
		!	clc                                                                                               !
		!	adc ?_$FT_CH4_NOTE_OFF?                                                                               !
		!	and #$0f                                                                                          !
		!	eor #$0f                                                                                          !
		!	sta ?_$ftTempVar1?                                                                                 !
		!	lda ?_$FT_CH4_DUTY?                                                                                   !
		!	asl a                                                                                             !
		!	and #$80                                                                                          !
		!	ora ?_$ftTempVar1?                                                                                 !
		!	sta ?_$FT_MR_NOISE_F?                                                                                 !
		!	lda ?_$FT_CH4_VOLUME?                                                                                 !
		!@ch4cut:                                                                                             !
		!	ora #$f0                                                                                          !
		!	sta ?_$FT_MR_NOISE_V?                                                                                 !
		!                                                                                                     !
		!                                                                                                     !
		!	.ifdef ?_$FT_SFX_ENABLE?                                                                              !
		!                                                                                                     !
		!	;process all sound effect streams                                                                 !
		!                                                                                                     !
		!	.if ?_$FT_SFX_STREAMS?>0                                                                              !
		!	ldx #?$FT_SFX_CH0?                                                                                   !
		_$FT2SfxUpdate()
		!	.endif                                                                                            !
		!	.if ?_$FT_SFX_STREAMS?>1                                                                              !
		!	ldx #?$FT_SFX_CH1?                                                                                   !
		_$FT2SfxUpdate()
		!	.endif                                                                                            !
		!	.if ?_$FT_SFX_STREAMS?>2                                                                              !
		!	ldx #?$FT_SFX_CH2?                                                                                   !
		_$FT2SfxUpdate()
		!	.endif                                                                                            !
		!	.if ?_$FT_SFX_STREAMS?>3                                                                              !
		!	ldx #?$FT_SFX_CH3?                                                                                   !
		_$FT2SfxUpdate()
		!	.endif                                                                                            !
		!                                                                                                     !
		!                                                                                                     !
		!	;send data from the output buffer to the APU                                                      !
		!                                                                                                     !
		!	lda ?_$FT_OUT_BUF?		;pulse 1 volume                                                               !
		!	sta ?_$APU_PL1_VOL?                                                                                   !
		!	lda ?_$FT_OUT_BUF?+1	;pulse 1 period LSB                                                           !
		!	sta ?_$APU_PL1_LO?                                                                                    !
		!	lda ?_$FT_OUT_BUF?+2	;pulse 1 period MSB, only applied when changed                                !
		!	cmp ?_$FT_PULSE1_PREV?                                                                                !
		!	beq @no_pulse1_upd                                                                                !
		!	sta ?_$FT_PULSE1_PREV?                                                                                !
		!	sta ?_$APU_PL1_HI?                                                                                    !
		!@no_pulse1_upd:                                                                                      !
		!                                                                                                     !
		!	lda ?_$FT_OUT_BUF?+3	;pulse 2 volume                                                               !
		!	sta ?_$APU_PL2_VOL?                                                                                   !
		!	lda ?_$FT_OUT_BUF?+4	;pulse 2 period LSB                                                           !
		!	sta ?_$APU_PL2_LO?                                                                                    !
		!	lda ?_$FT_OUT_BUF?+5	;pulse 2 period MSB, only applied when changed                                !
		!	cmp ?_$FT_PULSE2_PREV?                                                                                !
		!	beq @no_pulse2_upd                                                                                !
		!	sta ?_$FT_PULSE2_PREV?                                                                                !
		!	sta ?_$APU_PL2_HI?                                                                                    !
		!@no_pulse2_upd:                                                                                      !
		!                                                                                                     !
		!	lda ?_$FT_OUT_BUF?+6	;triangle volume (plays or not)                                               !
		!	sta ?_$APU_TRI_LINEAR?                                                                                !
		!	lda ?_$FT_OUT_BUF?+7	;triangle period LSB                                                          !
		!	sta ?_$APU_TRI_LO?                                                                                    !
		!	lda ?_$FT_OUT_BUF?+8	;triangle period MSB                                                          !
		!	sta ?_$APU_TRI_HI?                                                                                    !
		!                                                                                                     !
		!	lda ?_$FT_OUT_BUF?+9	;noise volume                                                                 !
		!	sta ?_$APU_NOISE_VOL?                                                                                 !
		!	lda ?_$FT_OUT_BUF?+10	;noise period                                                                 !
		!	sta ?_$APU_NOISE_LO?                                                                                  !
		!                                                                                                     !
		!	.endif                                                                                            !
		!                                                                                                     !
		!	.ifdef ?_$FT_THREAD?                                                                                  !
		!	pla                                                                                               !
		!	sta ?_$ftTempPtr? + 1                                                                                 !
		!	pla                                                                                               !
		!	sta ?_$ftTempPtr? + 0                                                                                 !
		!	.endif                                                                                            !
	}
	
	/*
	 * <p>Play a Sound Effect (SFX)</p>
	 * 
	 * <h2>Example:</h2>
	 * <code>
	 * $someEffects @PRG-ROM : "file://some-effects.asm"<br>
	 * <br>
	 * // somewhere in the code<br>
	 * FamiTone2NTSC.$openSfx($someEffects)<br>
	 * ...<br>
	 * FamiTone2NTSC.$playSfx(0, FamiTone2NTSC.$FT_SFX_CH0) // plays the 1st effect on channel 0<br>
	 * </code>
	 * 
	 * <h2>Parameters:</h2>
	 * <ul>
	 * <li><b>number</b>: the number of the effect to play</li>
	 * <li><b>channel</b>: the channel offset for playing. Choose one of FamiTone2NTSC.$ST_SFX_CH0 .. FamiTone2NTSC.$ST_SFX_CH3</li>
	 * </ul> */
	$playSfx(Byte number, Byte channel) {
		!	LDX ?channel? !
		!	LDA ?number?  !
		!	asl a					;get offset in the effects list      !
		!	tay                                                          !
		!                                                                !
		!	;stops the effect if it plays        !
		_$FT2SfxClearChannel()
		!                                                                !
		!	lda ?_$FT_SFX_ADR_L?                                             !
		!	sta ?_$ftTempPtr? + 0                                           !
		!	lda ?_$FT_SFX_ADR_H?                                             !
		!	sta ?_$ftTempPtr? + 1                                           !
		!                                                                !
		!	lda (?_$ftTempPtr?),y		;read effect pointer from the table  !
		!	sta ?_$FT_SFX_PTR_L?,x		;store it                            !
		!	iny                                                          !
		!	lda (?_$ftTempPtr?),y                                          !
		!	sta ?_$FT_SFX_PTR_H?,x		;this write enables the effect       !
	}
	
	_$FT2NoteTableLSB @PRG-ROM : [
		 [0x00, 0xAD, 0x4D, 0xF2, 0x9D, 0x4C, 0x00, 0xB8, 0x74, 0x34, 0xF7, 0xBE, 0x88, 0x56, 0x26, 0xF8],
		 [0xCE, 0xA5, 0x7F, 0x5B, 0x39, 0x19, 0xFB, 0xDE, 0xC3, 0xAA, 0x92, 0x7B, 0x66, 0x52, 0x3F, 0x2D],
		 [0x1C, 0x0C, 0xFD, 0xEE, 0xE1, 0xD4, 0xC8, 0xBD, 0xB2, 0xA8, 0x9F, 0x96, 0x8D, 0x85, 0x7E, 0x76],
		 [0x70, 0x69, 0x63, 0x5E, 0x58, 0x53, 0x4F, 0x4A, 0x46, 0x42, 0x3E, 0x3A, 0x37, 0x34, 0x31, 0x2E]
	 ]

	_$FT2NoteTableMSB @PRG-ROM : [
		 [0x00, 0x06, 0x06, 0x05, 0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02],
		 [0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
		 [0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
		 [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
	 ]
}