/*
 * <p>Representes the NES/Famicom <b>P</b>icture <b>P</b>rocessing <b>U</b>nit resposible to handle the graphics of the console.</p>
 * <p>This class contains methods to draw backgrounds and sprites and also to control the screen scrolling.</p>
 * <h2>Note:</h2>
 * <p>This class is not intended to be instantiated. It's implemented to be used in a singleton way, with all fields and methods being static</p>
 */
PPU {
	
	/*
	 * <p>Name Table number 0 localized at top left</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   <b>$2000</b>   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$NAME_TABLE_TOP_LEFT : 0x2000
	
	/*
	 * <p>Name Table number 1 localized at top right</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   <b>$2400</b>   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$NAME_TABLE_TOP_RIGHT : 0x2400
	
	/*
	 * <p>Name Table number 2 localized at bottom left</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   <b>$2800</b>   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$NAME_TABLE_BOTTOM_LEFT : 0x2800
	
	/*
	 * <p>Name Table number 3 localized at bottom right</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   <b>$2C00</b>   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$NAME_TABLE_BOTTOM_RIGHT : 0x2C00
	
	/*
	 * <p>Number of pixels in one row of the screen</p>
	 */
	$SCREEN_WIDTH_PX : 256
	
	/*
	 * <p>Number of pixels in one column of the screen</p>
	 */
    $SCREEN_HEIGHT_PX : 240
    
    /*
     * <p>Number of tiles in one row of the screen<p>
     * <h2>Note:</h2>
     * <p>Each tile has 8 pixels</p>
     */
    $SCREEN_WIDTH_TILES : 32
    
    /*
     * <p>Number of tiles in one column of the screen<p>
     * <h2>Note:</h2>
     * <p>Each tile has 8 pixels</p>
     */
    $SCREEN_HEIGHT_TILES : 30
	
	/*
	 * <p>Option to drawn sprites behind background</p>
	 */
	$SPRITE_BEHIND_BACKGROUND : 0b00100000
	
	/*
	 * <p>Option to drawn sprites mirrored (flipped horizontally)</p>
	 */
	$SPRITE_MIRROR : 0b01000000
	
	/*
	 * <p>Option to drawn the sprite flipped vertically</p>
	 */
	$SPRITE_FLIP : 0b10000000
	
	/*
	 * <p>The PPUCTRL register at 0x2000.</p>
	 * <p>Various flags controlling PPU operation.</p>
	 * <pre>7  bit  0
     * ---- ----
     * VPHB SINN
     * |||| ||||
     * |||| ||++- Base nametable address
     * |||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| |     (0: add 1, going across; 1: add 32, going down)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
     * <p>To write to this register, assign the byte to the <i>$ctrl</i> field and than call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$PPUCTRL : 0x2000
	
	/*
	 * <p>The PPUMASK register at 0x2001.</p>
	 * <p>This register controls the rendering of sprites and backgrounds, as well as colour effects.</p>
	 * <pre>7  bit  0
     * ---- ----
     * BGRs bMmG
     * |||| ||||
     * |||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red*
     * |+-------- Emphasize green*
     * +--------- Emphasize blue*
     * 
     * * NTSC colors. PAL and Dendy swaps green and red
     * </pre>
     * <h2>Note:</h2>
     * <p>To write to this register, assign the byte to the <i>$mask</i> field and than call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$PPUMASK : 0x2001
	
	/*
	 * <p>The PPUSTATUS register at 0x2002.</p>
	 * <p>This register reflects the state of various functions inside the PPU. It is often used for determining timing. To determine when the PPU has reached a given pixel of the screen, put an opaque pixel of sprite 0 there</p>
	 * <pre>7  bit  0
     * ---- ----
     * VSO. ....
     * |||| ||||
     * |||+-++++- Least significant bits previously written into a PPU register
     * |||        (due to register not being updated for this address)
     * ||+------- Sprite overflow. The intent was for this flag to be set
     * ||         whenever more than eight sprites appear on a scanline, but a
     * ||         hardware bug causes the actual behavior to be more complicated
     * ||         and generate false positives as well as false negatives; see
     * ||         <a href="/w/index.php/PPU_sprite_evaluation" title="PPU sprite evaluation">PPU sprite evaluation</a>. This flag is set during sprite
     * ||         evaluation and cleared at dot 1 (the second dot) of the
     * ||         pre-render line.
     * |+-------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 overlaps
     * |          a nonzero background pixel; cleared at dot 1 of the pre-render
     * |          line.  Used for raster timing.
     * +--------- Vertical blank has started (0: not in vblank; 1: in vblank).
     *            Set at dot 1 of line 241 (the line *after* the post-render
     *            line); cleared after reading $2002 and at dot 1 of the
     *            pre-render line.
     * </pre>
	 */
	$PPUSTATUS : 0x2002
	
	/*
	 * <p>The PPUSCROLL register at 0x2005.</p>
	 * <p>This register is used to change the scroll position, that is, to tell the PPU which pixel of the nametable selected through PPUCTRL should be at the top left corner of the rendered screen. Typically, this register is written to during vertical blanking, so that the next frame starts rendering from the desired location, but it can also be modified during rendering in order to split the screen. Changes made to the vertical scroll during rendering will only take effect on the next frame.</p>
	 * <h2>Note:</h2>
	 * <p>To write to this register, assign the horizontal scroll value to the <i>$scrollX</i> field, the vertical scroll value to the <i>$scrollY</i> field and than call <i>$update()</i> or <i>$updateScroll()</i></p>
	 */
	$PPUSCROLL : 0x2005
	
	/*
	 * <p>The PPUADDR register at 0x2006.</p>
	 * <p>This register is written by the <i>$drawBackground*</i> and <i>$paintBackground*</i> methods.</p>
	 * <p>Because the CPU and the PPU are on separate buses, neither has direct access to the other's memory. The CPU writes to VRAM through a pair of registers on the PPU. First it loads an address into PPUADDR, and then it writes repeatedly to PPUDATA to fill VRAM.</p>
	 * <h2>Note:</h2>
	 * <p>To assign the address 0x0000 to this register, call <i>update()</i> or <i>updateAddr()</i>
	 */
	$PPUADDR : 0x2006
	
	/*
	 * <p>The PPUDATA register at 0x2007.</p>
	 * <p>This register is written by the <i>$drawBackground*</i> and <i>$paintBackground*</i> methods.</p>
	 * <p>VRAM read/write data register. After access, the video memory address will increment by an amount determined by $2000:2.</p>
	 */
	$PPUDATA : 0x2007
	
	/*
	 * <p>The OAMADDR register at 0x2003.</p>
	 * <p>Write the address of OAM you want to access here. Most games just write $00 here and then use OAMDMA. (DMA is implemented in the 2A03/7 chip and works by repeatedly writing to OAMDATA)</p>
	 */
	$OAMADDR : 0x2003
	
	/*
	 * <p>The OAMDATA register at 0x2004.</p>
	 * <p>Write OAM data here. Writes will increment OAMADDR after the write; reads during vertical or forced blanking return the value from OAM at that address but do not increment.</p>
     * <p>Because changes to OAM should normally be made only during vblank, writing through OAMDATA is only effective for partial updates (it is too slow). Most games will use the DMA feature through OAMDMA instead.</p>
	 */
	$OAMDATA : 0x2004
	
	/*
	 * <p>The OAMDMA register at 0x4014.</p>
	 * <p>This port is located on the CPU. Writing $XX will upload 256 bytes of data from CPU page $XX00-$XXFF to the internal PPU OAM. This page is typically located in internal RAM, commonly $0200-$02FF, but cartridge RAM or ROM can be used as well.</p>
	 */
	$OAMDMA : 0x4014
	
	/*
	 * <p>Stores the bits written to PPUCTRL when <i>$update()</i> or <i>$updateCtrl()</i> is called.</p>
	 * <h2>Default:</h2>
	 * <pre>
	 * 1001 0000
     * |||| ||||
     * |||| ||++- Base nametable address
     * |||| ||    (0 = <b>$2000</b>; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| |     (0: <b>add 1</b>, going across; 1: add 32, going down)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: <b>$0000</b>; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: <b>$1000</b>)
     * ||+------- Sprite size (0: <b>8x8</b>; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: <b>read backdrop from EXT pins</b>; 1: output color on EXT pins)
     * +--------- Generate an NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: <b>on</b>)
     * </pre>
	 */
	$ctrl : 0b10010000
	
	/*
	 * <p>Stores the bits written to PPUMASK when <i>$update()</i> or <i>updateMask()</i> is called.</p>
	 * <h2>Default:</h2>
	 * <pre>
     * 0001 1110
     * |||| ||||
     * |||| |||+- Greyscale (0: <b>normal color</b>, 1: produce a greyscale display)
     * |||| ||+-- 1: <b>Show background in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| |+--- 1: <b>Show sprites in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| +---- 1: <b>Show background</b>
     * |||+------ 1: <b>Show sprites</b>
     * ||+------- <b>Emphasize red*</b>
     * |+-------- <b>Emphasize green*</b>
     * +--------- <b>Emphasize blue*</b>
     * 
     * * NTSC colors. PAL and Dendy swaps green and red
     * </pre>
	 */
	$mask : 0b00011110
	
	/*
	 * <p>Horizontal scroll value written to PPUSCROLL when <i>$update()</i> or <i>$updateScroll()</i> is called.</p>
	 */
	$scrollX : 0
	
	/*
	 * <p>Vertical scroll value written to PPUSCROLL when <i>$update()</i> or <i>$updateScroll()</i> is called.</p>
	 */
	$scrollY : 0
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 00<sub>2</sub>, setting the name table address to 0x2000:</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   <b>$2000</b>   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setNameTableAtTopLeft() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111100 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 01<sub>2</sub>, setting the name table address to 0x2400:</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   <b>$2400</b>   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setNameTableAtTopRight() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111100 !
		!	ORA #%00000001 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 10<sub>2</sub>, setting the name table address to 0x2800:</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   <b>$2800</b>   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setNameTableAtBottomLeft() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111100 !
		!	ORA #%00000010 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 11<sub>2</sub>, setting the name table address to 0x2C00:</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   <b>$2C00</b>   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setNameTableAtBottomRight() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00000011 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUCTRL to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>0</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>++- Base nametable address
     * |||| |<b>|</b>    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |<b>+--- VRAM address increment per CPU read/write of PPUDATA</b>
     * |||| |<b>     (0: add 1, going across</b>; 1: add 32, going down)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setVramIncrementBy1GoingAcross() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111011 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUCTRL to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>1</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>++- Base nametable address
     * |||| |<b>|</b>    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |<b>+--- VRAM address increment per CPU read/write of PPUDATA</b>
     * |||| |     (0: add 1, going across; <b>1: add 32, going down</b>)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setVramIncrementBy32GoingDown() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00000100 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUCTRL to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>0</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>|++- Base nametable address
     * |||| <b>|</b>|    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| <b>|</b>+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| <b>|</b>     (0: add 1, going across; 1: add 32, going down)
     * |||| <b>+---- Sprite pattern table address for 8x8 sprites</b>
     * |||| <b>      (0: $0000</b>; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 * <p>It's ignored if sprite size is set to 8x16</p>
	 */
	$setLeftPatternTableFor8x8Sprites() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11110111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUCTRL to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>1</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>|++- Base nametable address
     * |||| <b>|</b>|    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| <b>|</b>+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| <b>|</b>     (0: add 1, going across; 1: add 32, going down)
     * |||| <b>+---- Sprite pattern table address for 8x8 sprites</b>
     * ||||       (0: $0000; <b>1: $1000</b>; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 * <p>It's ignored if sprite size is set to 8x16</p>
	 */
	$setRightPatternTableFor8x8Sprites() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00001000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUCTRL to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>0</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> ||++- Base nametable address
     * |||<b>|</b> ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||<b>|</b> |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||<b>|</b> |     (0: add 1, going across; 1: add 32, going down)
     * |||<b>|</b> +---- Sprite pattern table address for 8x8 sprites
     * |||<b>|</b>       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||<b>+------ Background pattern table address (0: $0000</b>; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setLeftPatternTableForBackground() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11101111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUCTRL to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>1</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> ||++- Base nametable address
     * |||<b>|</b> ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||<b>|</b> |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||<b>|</b> |     (0: add 1, going across; 1: add 32, going down)
     * |||<b>|</b> +---- Sprite pattern table address for 8x8 sprites
     * |||<b>|</b>       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||<b>+------ Background pattern table address</b> (0: $0000; <b>1: $1000</b>)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setRightPatternTableForBackground() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00010000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUCTRL to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>0</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| ||++- Base nametable address
     * ||<b>|</b>| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * ||<b>|</b>| |+--- VRAM address increment per CPU read/write of PPUDATA
     * ||<b>|</b>| |     (0: add 1, going across; 1: add 32, going down)
     * ||<b>|</b>| +---- Sprite pattern table address for 8x8 sprites
     * ||<b>|</b>|       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * ||<b>|</b>+------ Background pattern table address (0: $0000; 1: $1000)
     * ||<b>+------- Sprite size (0: 8x8</b>; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setSpriteSizeTo8x8() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11011111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUCTRL to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>1</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| ||++- Base nametable address
     * ||<b>|</b>| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * ||<b>|</b>| |+--- VRAM address increment per CPU read/write of PPUDATA
     * ||<b>|</b>| |     (0: add 1, going across; 1: add 32, going down)
     * ||<b>|</b>| +---- Sprite pattern table address for 8x8 sprites
     * ||<b>|</b>|       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * ||<b>|</b>+------ Background pattern table address (0: $0000; 1: $1000)
     * ||<b>+------- Sprite size</b> (0: 8x8; <b>1: 8x16</b>)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setSpriteSizeTo8x16() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00100000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUCTRL to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>0</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| ||++- Base nametable address
     * |<b>|</b>|| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |<b>|</b>|| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |<b>|</b>|| |     (0: add 1, going across; 1: add 32, going down)
     * |<b>|</b>|| +---- Sprite pattern table address for 8x8 sprites
     * |<b>|</b>||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |<b>|</b>|+------ Background pattern table address (0: $0000; 1: $1000)
     * |<b>|</b>+------- Sprite size (0: 8x8; 1: 8x16)
     * |<b>+-------- PPU master/slave select</b>
     * |<b>          (0: read backdrop from EXT pins</b>; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$enableMasterMode() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%10111111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUCTRL to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>1</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| ||++- Base nametable address
     * |<b>|</b>|| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |<b>|</b>|| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |<b>|</b>|| |     (0: add 1, going across; 1: add 32, going down)
     * |<b>|</b>|| +---- Sprite pattern table address for 8x8 sprites
     * |<b>|</b>||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |<b>|</b>|+------ Background pattern table address (0: $0000; 1: $1000)
     * |<b>|</b>+------- Sprite size (0: 8x8; 1: 8x16)
     * |<b>+-------- PPU master/slave select</b>
     * |          (0: read backdrop from EXT pins; <b>1: output color on EXT pins</b>)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$disableMasterMode() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%01000000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUCTRL to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>1</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| ||++- Base nametable address
     * <b>|</b>||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * <b>|</b>||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * <b>|</b>||| |     (0: add 1, going across; 1: add 32, going down)
     * <b>|</b>||| +---- Sprite pattern table address for 8x8 sprites
     * <b>|</b>|||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * <b>|</b>||+------ Background pattern table address (0: $0000; 1: $1000)
     * <b>|</b>|+------- Sprite size (0: 8x8; 1: 8x16)
     * <b>|</b>+-------- PPU master/slave select
     * <b>|</b>          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * <b>+--------- Generate a NMI at the start of the</b>
     * <b>           <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a></b> (0: off; <b>1: on</b>)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$enableNMI() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%10000000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUCTRL to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>0</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| ||++- Base nametable address
     * <b>|</b>||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * <b>|</b>||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * <b>|</b>||| |     (0: add 1, going across; 1: add 32, going down)
     * <b>|</b>||| +---- Sprite pattern table address for 8x8 sprites
     * <b>|</b>|||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * <b>|</b>||+------ Background pattern table address (0: $0000; 1: $1000)
     * <b>|</b>|+------- Sprite size (0: 8x8; 1: 8x16)
     * <b>|</b>+-------- PPU master/slave select
     * <b>|</b>          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * <b>+--------- Generate a NMI at the start of the</b>
     * <b>           <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a></b> (<b>0: off</b>; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$disableNMI() @Inline {
		!	LDA ?$PPUSTATUS? !
		!	LDA ?$ctrl?    !
		!	AND #%01111111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 0 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xxx<b>0</b>
     * |||| |||<b>|</b>
     * |||| |||<b>+- Greyscale</b> (0: normal color, <b>1: produce a greyscale display</b>)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$enableGreyscale() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00000001 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 0 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xxx<b>1</b>
     * |||| |||<b>|</b>
     * |||| |||<b>+- Greyscale (0: normal color</b>, 1: produce a greyscale display)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$disableGreyscale() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11111110 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 1 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xx<b>1</b>x
     * |||| ||<b>|</b>|
     * |||| ||<b>|</b>+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| ||<b>+-- 1: Show background in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showBackgroundInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00000010 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 1 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xx<b>1</b>x
     * |||| ||<b>|</b>|
     * |||| ||<b>|</b>+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, <b>0: Hide</b>
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideBackgroundInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11111101 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>1</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>|+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| |<b>|</b>+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |<b>+--- 1: Show sprites in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showSpritesInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00000100 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>0</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>|+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| |<b>|</b>+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, <b>0: Hide</b>
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideSpritesInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11111011 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>1</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| <b>|</b>|+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| <b>|</b>+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| <b>+---- 1: Show background</b>
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showBackground() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00001000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>0</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| <b>|</b>|+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| <b>|</b>+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background; <b>0: Hide background</b>
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideBackground() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11110111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>1</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||<b>|</b> ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> +---- 1: Show background
     * |||<b>+------ 1: Show sprites</b>
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showSprites() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00010000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>0</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||<b>|</b> ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> +---- 1: Show background
     * |||+------ 1: Show sprites; <b>0: Hide sprites</b>
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideSprites() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11101111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>1</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * ||<b>|</b>| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| +---- 1: Show background
     * ||<b>|</b>+------ 1: Show sprites
     * ||<b>+------- Emphasize red</b>
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$enableRedEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00100000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>0</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * ||<b>|</b>| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| +---- 1: Show background
     * ||<b>|</b>+------ 1: Show sprites
     * ||<b>+------- Don't emphasize red</b>
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$disableRedEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11011111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>1</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |<b>|</b>|| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| +---- 1: Show background
     * |<b>|</b>|+------ 1: Show sprites
     * |<b>|</b>+------- Emphasize red
     * |<b>+-------- Emphasize green</b>
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$enableGreenEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%01000000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>0</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |<b>|</b>|| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| +---- 1: Show background
     * |<b>|</b>|+------ 1: Show sprites
     * |<b>|</b>+------- Emphasize red
     * |<b>+-------- Don't emphasize green</b>
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$disableGreenEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	AND #%10111111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUMASK to 1:</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>1</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * <b>|</b>||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| +---- 1: Show background
     * <b>|</b>||+------ 1: Show sprites
     * <b>|</b>|+------- Emphasize red
     * <b>|</b>+-------- Emphasize green
     * <b>+--------- Emphasize blue</b>
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$enableBlueEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%10000000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUMASK to 0:</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>0</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * <b>|</b>||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| +---- 1: Show background
     * <b>|</b>||+------ 1: Show sprites
     * <b>|</b>|+------- Emphasize red
     * <b>|</b>+-------- Emphasize green
     * <b>+--------- Don't emphasize blue</b>
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$disableBlueEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	AND #%01111111 !
		!	STA ?$mask?    !
	}
	
	/*
    * <p>Load the background palettes.</p>
    * <h2>Parameters:</h2>
    * <ul>
    * <li><b>palettes</b>: an array of 4 palettes containing 4 colors each from NES palette</li>
    * </ul>
    * <h2>NES palette colors</h2>
	* <table class="wikitable">
	* <tbody><tr>
	* <td style="border:0px;background-color:#6D6D6D;width:32px;height:32px;color:#fff;text-align:center">0x00
	* </td>
	* <td style="border:0px;background-color:#002491;width:32px;height:32px;color:#fff;text-align:center">0x01
	* </td>
	* <td style="border:0px;background-color:#0000DA;width:32px;height:32px;color:#fff;text-align:center">0x02
	* </td>
	* <td style="border:0px;background-color:#6D48DA;width:32px;height:32px;color:#fff;text-align:center">0x03
	* </td>
	* <td style="border:0px;background-color:#91006D;width:32px;height:32px;color:#fff;text-align:center">0x04
	* </td>
	* <td style="border:0px;background-color:#B6006D;width:32px;height:32px;color:#fff;text-align:center">0x05
	* </td>
	* <td style="border:0px;background-color:#B62400;width:32px;height:32px;color:#fff;text-align:center">0x06
	* </td>
	* <td style="border:0px;background-color:#914800;width:32px;height:32px;color:#fff;text-align:center">0x07
	* </td>
	* <td style="border:0px;background-color:#6D4800;width:32px;height:32px;color:#fff;text-align:center">0x08
	* </td>
	* <td style="border:0px;background-color:#244800;width:32px;height:32px;color:#fff;text-align:center">0x09
	* </td>
	* <td style="border:0px;background-color:#006D24;width:32px;height:32px;color:#fff;text-align:center">0x0A
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x0B
	* </td>
	* <td style="border:0px;background-color:#004848;width:32px;height:32px;color:#fff;text-align:center">0x0C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x0D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#B6B6B6;width:32px;height:32px;color:#fff;text-align:center">0x10
	* </td>
	* <td style="border:0px;background-color:#006DDA;width:32px;height:32px;color:#fff;text-align:center">0x11
	* </td>
	* <td style="border:0px;background-color:#0048FF;width:32px;height:32px;color:#fff;text-align:center">0x12
	* </td>
	* <td style="border:0px;background-color:#9100FF;width:32px;height:32px;color:#fff;text-align:center">0x13
	* </td>
	* <td style="border:0px;background-color:#B600FF;width:32px;height:32px;color:#fff;text-align:center">0x14
	* </td>
	* <td style="border:0px;background-color:#FF0091;width:32px;height:32px;color:#fff;text-align:center">0x15
	* </td>
	* <td style="border:0px;background-color:#FF0000;width:32px;height:32px;color:#fff;text-align:center">0x16
	* </td>
	* <td style="border:0px;background-color:#DA6D00;width:32px;height:32px;color:#fff;text-align:center">0x17
	* </td>
	* <td style="border:0px;background-color:#916D00;width:32px;height:32px;color:#fff;text-align:center">0x18
	* </td>
	* <td style="border:0px;background-color:#249100;width:32px;height:32px;color:#fff;text-align:center">0x19
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x1A
	* </td>
	* <td style="border:0px;background-color:#00B66D;width:32px;height:32px;color:#fff;text-align:center">0x1B
	* </td>
	* <td style="border:0px;background-color:#009191;width:32px;height:32px;color:#fff;text-align:center">0x1C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x20
	* </td>
	* <td style="border:0px;background-color:#6DB6FF;width:32px;height:32px;color:#000;text-align:center">0x21
	* </td>
	* <td style="border:0px;background-color:#9191FF;width:32px;height:32px;color:#000;text-align:center">0x22
	* </td>
	* <td style="border:0px;background-color:#DA6DFF;width:32px;height:32px;color:#000;text-align:center">0x23
	* </td>
	* <td style="border:0px;background-color:#FF00FF;width:32px;height:32px;color:#000;text-align:center">0x24
	* </td>
	* <td style="border:0px;background-color:#FF6DFF;width:32px;height:32px;color:#000;text-align:center">0x25
	* </td>
	* <td style="border:0px;background-color:#FF9100;width:32px;height:32px;color:#000;text-align:center">0x26
	* </td>
	* <td style="border:0px;background-color:#FFB600;width:32px;height:32px;color:#000;text-align:center">0x27
	* </td>
	* <td style="border:0px;background-color:#DADA00;width:32px;height:32px;color:#000;text-align:center">0x28
	* </td>
	* <td style="border:0px;background-color:#6DDA00;width:32px;height:32px;color:#000;text-align:center">0x29
	* </td>
	* <td style="border:0px;background-color:#00FF00;width:32px;height:32px;color:#000;text-align:center">0x2A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x2B
	* </td>
	* <td style="border:0px;background-color:#00FFFF;width:32px;height:32px;color:#000;text-align:center">0x2C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x30
	* </td>
	* <td style="border:0px;background-color:#B6DAFF;width:32px;height:32px;color:#000;text-align:center">0x31
	* </td>
	* <td style="border:0px;background-color:#DAB6FF;width:32px;height:32px;color:#000;text-align:center">0x32
	* </td>
	* <td style="border:0px;background-color:#FFB6FF;width:32px;height:32px;color:#000;text-align:center">0x33
	* </td>
	* <td style="border:0px;background-color:#FF91FF;width:32px;height:32px;color:#000;text-align:center">0x34
	* </td>
	* <td style="border:0px;background-color:#FFB6B6;width:32px;height:32px;color:#000;text-align:center">0x35
	* </td>
	* <td style="border:0px;background-color:#FFDA91;width:32px;height:32px;color:#000;text-align:center">0x36
	* </td>
	* <td style="border:0px;background-color:#FFFF48;width:32px;height:32px;color:#000;text-align:center">0x37
	* </td>
	* <td style="border:0px;background-color:#FFFF6D;width:32px;height:32px;color:#000;text-align:center">0x38
	* </td>
	* <td style="border:0px;background-color:#B6FF48;width:32px;height:32px;color:#000;text-align:center">0x39
	* </td>
	* <td style="border:0px;background-color:#91FF6D;width:32px;height:32px;color:#000;text-align:center">0x3A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x3B
	* </td>
	* <td style="border:0px;background-color:#91DAFF;width:32px;height:32px;color:#000;text-align:center">0x3C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3F
	* </td></tr></tbody></table>
	* <h2>Note:</h2>
	* <p>These colors vary depending on TV/Console/Emulator in which the game plays</p>
	* */
    $setBackgroundPalettes(Byte[4][4] palettes) {
    	!	LDA #>$3F00         !
    	!	STA ?$PPUADDR?      !
    	!	LDA #<$3F00         !
    	!	STA ?$PPUADDR?      !
    	!	                    !
    	!	LDY #$00            !
    	!-loop:                 !
    	!	LDA (?palettes?), Y !
    	!	STA ?$PPUDATA?      !
    	!	INY                 !
    	!	CPY #$10            !
    	!	BNE -loop           !
    }
    
    /*
    * <p>Load one of the background palettes.</p>
    * <h2>Parameters:</h2>
    * <ul>
    * <li><b>index</b>: the index of the pallete from 0 to 3</li>
    * <li><b>palette</b>: an array of 4 colors from the NES palette</li>
    * </ul>
    * <h2>NES palette colors</h2>
	* <table class="wikitable">
	* <tbody><tr>
	* <td style="border:0px;background-color:#6D6D6D;width:32px;height:32px;color:#fff;text-align:center">0x00
	* </td>
	* <td style="border:0px;background-color:#002491;width:32px;height:32px;color:#fff;text-align:center">0x01
	* </td>
	* <td style="border:0px;background-color:#0000DA;width:32px;height:32px;color:#fff;text-align:center">0x02
	* </td>
	* <td style="border:0px;background-color:#6D48DA;width:32px;height:32px;color:#fff;text-align:center">0x03
	* </td>
	* <td style="border:0px;background-color:#91006D;width:32px;height:32px;color:#fff;text-align:center">0x04
	* </td>
	* <td style="border:0px;background-color:#B6006D;width:32px;height:32px;color:#fff;text-align:center">0x05
	* </td>
	* <td style="border:0px;background-color:#B62400;width:32px;height:32px;color:#fff;text-align:center">0x06
	* </td>
	* <td style="border:0px;background-color:#914800;width:32px;height:32px;color:#fff;text-align:center">0x07
	* </td>
	* <td style="border:0px;background-color:#6D4800;width:32px;height:32px;color:#fff;text-align:center">0x08
	* </td>
	* <td style="border:0px;background-color:#244800;width:32px;height:32px;color:#fff;text-align:center">0x09
	* </td>
	* <td style="border:0px;background-color:#006D24;width:32px;height:32px;color:#fff;text-align:center">0x0A
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x0B
	* </td>
	* <td style="border:0px;background-color:#004848;width:32px;height:32px;color:#fff;text-align:center">0x0C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x0D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#B6B6B6;width:32px;height:32px;color:#fff;text-align:center">0x10
	* </td>
	* <td style="border:0px;background-color:#006DDA;width:32px;height:32px;color:#fff;text-align:center">0x11
	* </td>
	* <td style="border:0px;background-color:#0048FF;width:32px;height:32px;color:#fff;text-align:center">0x12
	* </td>
	* <td style="border:0px;background-color:#9100FF;width:32px;height:32px;color:#fff;text-align:center">0x13
	* </td>
	* <td style="border:0px;background-color:#B600FF;width:32px;height:32px;color:#fff;text-align:center">0x14
	* </td>
	* <td style="border:0px;background-color:#FF0091;width:32px;height:32px;color:#fff;text-align:center">0x15
	* </td>
	* <td style="border:0px;background-color:#FF0000;width:32px;height:32px;color:#fff;text-align:center">0x16
	* </td>
	* <td style="border:0px;background-color:#DA6D00;width:32px;height:32px;color:#fff;text-align:center">0x17
	* </td>
	* <td style="border:0px;background-color:#916D00;width:32px;height:32px;color:#fff;text-align:center">0x18
	* </td>
	* <td style="border:0px;background-color:#249100;width:32px;height:32px;color:#fff;text-align:center">0x19
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x1A
	* </td>
	* <td style="border:0px;background-color:#00B66D;width:32px;height:32px;color:#fff;text-align:center">0x1B
	* </td>
	* <td style="border:0px;background-color:#009191;width:32px;height:32px;color:#fff;text-align:center">0x1C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x20
	* </td>
	* <td style="border:0px;background-color:#6DB6FF;width:32px;height:32px;color:#000;text-align:center">0x21
	* </td>
	* <td style="border:0px;background-color:#9191FF;width:32px;height:32px;color:#000;text-align:center">0x22
	* </td>
	* <td style="border:0px;background-color:#DA6DFF;width:32px;height:32px;color:#000;text-align:center">0x23
	* </td>
	* <td style="border:0px;background-color:#FF00FF;width:32px;height:32px;color:#000;text-align:center">0x24
	* </td>
	* <td style="border:0px;background-color:#FF6DFF;width:32px;height:32px;color:#000;text-align:center">0x25
	* </td>
	* <td style="border:0px;background-color:#FF9100;width:32px;height:32px;color:#000;text-align:center">0x26
	* </td>
	* <td style="border:0px;background-color:#FFB600;width:32px;height:32px;color:#000;text-align:center">0x27
	* </td>
	* <td style="border:0px;background-color:#DADA00;width:32px;height:32px;color:#000;text-align:center">0x28
	* </td>
	* <td style="border:0px;background-color:#6DDA00;width:32px;height:32px;color:#000;text-align:center">0x29
	* </td>
	* <td style="border:0px;background-color:#00FF00;width:32px;height:32px;color:#000;text-align:center">0x2A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x2B
	* </td>
	* <td style="border:0px;background-color:#00FFFF;width:32px;height:32px;color:#000;text-align:center">0x2C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x30
	* </td>
	* <td style="border:0px;background-color:#B6DAFF;width:32px;height:32px;color:#000;text-align:center">0x31
	* </td>
	* <td style="border:0px;background-color:#DAB6FF;width:32px;height:32px;color:#000;text-align:center">0x32
	* </td>
	* <td style="border:0px;background-color:#FFB6FF;width:32px;height:32px;color:#000;text-align:center">0x33
	* </td>
	* <td style="border:0px;background-color:#FF91FF;width:32px;height:32px;color:#000;text-align:center">0x34
	* </td>
	* <td style="border:0px;background-color:#FFB6B6;width:32px;height:32px;color:#000;text-align:center">0x35
	* </td>
	* <td style="border:0px;background-color:#FFDA91;width:32px;height:32px;color:#000;text-align:center">0x36
	* </td>
	* <td style="border:0px;background-color:#FFFF48;width:32px;height:32px;color:#000;text-align:center">0x37
	* </td>
	* <td style="border:0px;background-color:#FFFF6D;width:32px;height:32px;color:#000;text-align:center">0x38
	* </td>
	* <td style="border:0px;background-color:#B6FF48;width:32px;height:32px;color:#000;text-align:center">0x39
	* </td>
	* <td style="border:0px;background-color:#91FF6D;width:32px;height:32px;color:#000;text-align:center">0x3A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x3B
	* </td>
	* <td style="border:0px;background-color:#91DAFF;width:32px;height:32px;color:#000;text-align:center">0x3C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3F
	* </td></tr></tbody></table>
	* <h2>Note:</h2>
	* <p>These colors vary depending on TV/Console/Emulator in which the game plays</o>
	* */
    $setBackgroundPalette(Byte index, Byte[4] palette) {
    	!	LDA #>$3F00         !
    	!	STA ?$PPUADDR?      !
    	!	LDA ?index?         !
    	!	ASL A               !
    	!	ASL A               !
    	!	CLC                 !
    	!	ADC #<$3F00         !
    	!	STA ?$PPUADDR?      !
    	!	                    !
    	!	LDY #0              !
    	!-loop:                 !
    	!	LDA (?palette?), Y  !
    	!	STA ?$PPUDATA?      !
    	!	INY                 !
    	!	CPY #4              !
    	!	BNE -loop           !
    }
    
    /*
    * <p>Load one background palette color.</p>
    * <h2>Parameters:</h2>
    * <ul>
    * <li><b>idx</b>: the index of the palette from 0 to 15</li>
    * <li><b>color</b>: a color from the NES palette</li>
    * </ul>
    */
    $setBackgroundPaletteColor(Byte idx, Byte color) {
    	!	LDA #>$3F00    !
    	!	STA ?$PPUADDR? !
    	!	CLC            !
    	!	LDA ?idx?      !
    	!	ADC #<$3F00    !
    	!	STA ?$PPUADDR? !
    	!	LDA ?color?    !
    	!	STA ?$PPUDATA? !
    }
    
    /*
    * <p>Load the sprites palettes.</p>
    * <h2>Parameters:</h2>
    * <ul>
    * <li><b>palettes</b>: an array of 4 palettes containing 16 colors each from NES palette</li>
    * </ul>
    * <h2>NES palette colors</h2>
	* <table class="wikitable">
	* <tbody><tr>
	* <td style="border:0px;background-color:#6D6D6D;width:32px;height:32px;color:#fff;text-align:center">0x00
	* </td>
	* <td style="border:0px;background-color:#002491;width:32px;height:32px;color:#fff;text-align:center">0x01
	* </td>
	* <td style="border:0px;background-color:#0000DA;width:32px;height:32px;color:#fff;text-align:center">0x02
	* </td>
	* <td style="border:0px;background-color:#6D48DA;width:32px;height:32px;color:#fff;text-align:center">0x03
	* </td>
	* <td style="border:0px;background-color:#91006D;width:32px;height:32px;color:#fff;text-align:center">0x04
	* </td>
	* <td style="border:0px;background-color:#B6006D;width:32px;height:32px;color:#fff;text-align:center">0x05
	* </td>
	* <td style="border:0px;background-color:#B62400;width:32px;height:32px;color:#fff;text-align:center">0x06
	* </td>
	* <td style="border:0px;background-color:#914800;width:32px;height:32px;color:#fff;text-align:center">0x07
	* </td>
	* <td style="border:0px;background-color:#6D4800;width:32px;height:32px;color:#fff;text-align:center">0x08
	* </td>
	* <td style="border:0px;background-color:#244800;width:32px;height:32px;color:#fff;text-align:center">0x09
	* </td>
	* <td style="border:0px;background-color:#006D24;width:32px;height:32px;color:#fff;text-align:center">0x0A
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x0B
	* </td>
	* <td style="border:0px;background-color:#004848;width:32px;height:32px;color:#fff;text-align:center">0x0C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x0D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#B6B6B6;width:32px;height:32px;color:#fff;text-align:center">0x10
	* </td>
	* <td style="border:0px;background-color:#006DDA;width:32px;height:32px;color:#fff;text-align:center">0x11
	* </td>
	* <td style="border:0px;background-color:#0048FF;width:32px;height:32px;color:#fff;text-align:center">0x12
	* </td>
	* <td style="border:0px;background-color:#9100FF;width:32px;height:32px;color:#fff;text-align:center">0x13
	* </td>
	* <td style="border:0px;background-color:#B600FF;width:32px;height:32px;color:#fff;text-align:center">0x14
	* </td>
	* <td style="border:0px;background-color:#FF0091;width:32px;height:32px;color:#fff;text-align:center">0x15
	* </td>
	* <td style="border:0px;background-color:#FF0000;width:32px;height:32px;color:#fff;text-align:center">0x16
	* </td>
	* <td style="border:0px;background-color:#DA6D00;width:32px;height:32px;color:#fff;text-align:center">0x17
	* </td>
	* <td style="border:0px;background-color:#916D00;width:32px;height:32px;color:#fff;text-align:center">0x18
	* </td>
	* <td style="border:0px;background-color:#249100;width:32px;height:32px;color:#fff;text-align:center">0x19
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x1A
	* </td>
	* <td style="border:0px;background-color:#00B66D;width:32px;height:32px;color:#fff;text-align:center">0x1B
	* </td>
	* <td style="border:0px;background-color:#009191;width:32px;height:32px;color:#fff;text-align:center">0x1C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x20
	* </td>
	* <td style="border:0px;background-color:#6DB6FF;width:32px;height:32px;color:#000;text-align:center">0x21
	* </td>
	* <td style="border:0px;background-color:#9191FF;width:32px;height:32px;color:#000;text-align:center">0x22
	* </td>
	* <td style="border:0px;background-color:#DA6DFF;width:32px;height:32px;color:#000;text-align:center">0x23
	* </td>
	* <td style="border:0px;background-color:#FF00FF;width:32px;height:32px;color:#000;text-align:center">0x24
	* </td>
	* <td style="border:0px;background-color:#FF6DFF;width:32px;height:32px;color:#000;text-align:center">0x25
	* </td>
	* <td style="border:0px;background-color:#FF9100;width:32px;height:32px;color:#000;text-align:center">0x26
	* </td>
	* <td style="border:0px;background-color:#FFB600;width:32px;height:32px;color:#000;text-align:center">0x27
	* </td>
	* <td style="border:0px;background-color:#DADA00;width:32px;height:32px;color:#000;text-align:center">0x28
	* </td>
	* <td style="border:0px;background-color:#6DDA00;width:32px;height:32px;color:#000;text-align:center">0x29
	* </td>
	* <td style="border:0px;background-color:#00FF00;width:32px;height:32px;color:#000;text-align:center">0x2A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x2B
	* </td>
	* <td style="border:0px;background-color:#00FFFF;width:32px;height:32px;color:#000;text-align:center">0x2C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x30
	* </td>
	* <td style="border:0px;background-color:#B6DAFF;width:32px;height:32px;color:#000;text-align:center">0x31
	* </td>
	* <td style="border:0px;background-color:#DAB6FF;width:32px;height:32px;color:#000;text-align:center">0x32
	* </td>
	* <td style="border:0px;background-color:#FFB6FF;width:32px;height:32px;color:#000;text-align:center">0x33
	* </td>
	* <td style="border:0px;background-color:#FF91FF;width:32px;height:32px;color:#000;text-align:center">0x34
	* </td>
	* <td style="border:0px;background-color:#FFB6B6;width:32px;height:32px;color:#000;text-align:center">0x35
	* </td>
	* <td style="border:0px;background-color:#FFDA91;width:32px;height:32px;color:#000;text-align:center">0x36
	* </td>
	* <td style="border:0px;background-color:#FFFF48;width:32px;height:32px;color:#000;text-align:center">0x37
	* </td>
	* <td style="border:0px;background-color:#FFFF6D;width:32px;height:32px;color:#000;text-align:center">0x38
	* </td>
	* <td style="border:0px;background-color:#B6FF48;width:32px;height:32px;color:#000;text-align:center">0x39
	* </td>
	* <td style="border:0px;background-color:#91FF6D;width:32px;height:32px;color:#000;text-align:center">0x3A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x3B
	* </td>
	* <td style="border:0px;background-color:#91DAFF;width:32px;height:32px;color:#000;text-align:center">0x3C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3F
	* </td></tr></tbody></table>
	* <h2>Note:</h2>
	* <p>These colors vary depending on TV/Console/Emulator in which the game plays</p>
	* */
    $setSpritesPalettes(Byte[4][4] palettes) {
    	!	LDA #>$3F10         !
    	!	STA ?$PPUADDR?      !
    	!	LDA #<$3F10         !
    	!	STA ?$PPUADDR?      !
    	!	                    !
    	!	LDY #$00            !
    	!-loop:                 !
    	!	LDA (?palettes?), Y !
    	!	STA ?$PPUDATA?      !
    	!	INY                 !
    	!	CPY #$10            !
    	!	BNE -loop           !
    }
    
    /*
    * <p>Load one of the sprites palettes.</p>
    * <h2>Parameters:</h2>
    * <ul>
    * <li><b>index</b>: the index of the pallete from 0 to 3</li>
    * <li><b>palettes</b>: an array of 4 colors from the NES palette</li>
    * </ul>
    * <h2>NES palette colors</h2>
	* <table class="wikitable">
	* <tbody><tr>
	* <td style="border:0px;background-color:#6D6D6D;width:32px;height:32px;color:#fff;text-align:center">0x00
	* </td>
	* <td style="border:0px;background-color:#002491;width:32px;height:32px;color:#fff;text-align:center">0x01
	* </td>
	* <td style="border:0px;background-color:#0000DA;width:32px;height:32px;color:#fff;text-align:center">0x02
	* </td>
	* <td style="border:0px;background-color:#6D48DA;width:32px;height:32px;color:#fff;text-align:center">0x03
	* </td>
	* <td style="border:0px;background-color:#91006D;width:32px;height:32px;color:#fff;text-align:center">0x04
	* </td>
	* <td style="border:0px;background-color:#B6006D;width:32px;height:32px;color:#fff;text-align:center">0x05
	* </td>
	* <td style="border:0px;background-color:#B62400;width:32px;height:32px;color:#fff;text-align:center">0x06
	* </td>
	* <td style="border:0px;background-color:#914800;width:32px;height:32px;color:#fff;text-align:center">0x07
	* </td>
	* <td style="border:0px;background-color:#6D4800;width:32px;height:32px;color:#fff;text-align:center">0x08
	* </td>
	* <td style="border:0px;background-color:#244800;width:32px;height:32px;color:#fff;text-align:center">0x09
	* </td>
	* <td style="border:0px;background-color:#006D24;width:32px;height:32px;color:#fff;text-align:center">0x0A
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x0B
	* </td>
	* <td style="border:0px;background-color:#004848;width:32px;height:32px;color:#fff;text-align:center">0x0C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x0D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#B6B6B6;width:32px;height:32px;color:#fff;text-align:center">0x10
	* </td>
	* <td style="border:0px;background-color:#006DDA;width:32px;height:32px;color:#fff;text-align:center">0x11
	* </td>
	* <td style="border:0px;background-color:#0048FF;width:32px;height:32px;color:#fff;text-align:center">0x12
	* </td>
	* <td style="border:0px;background-color:#9100FF;width:32px;height:32px;color:#fff;text-align:center">0x13
	* </td>
	* <td style="border:0px;background-color:#B600FF;width:32px;height:32px;color:#fff;text-align:center">0x14
	* </td>
	* <td style="border:0px;background-color:#FF0091;width:32px;height:32px;color:#fff;text-align:center">0x15
	* </td>
	* <td style="border:0px;background-color:#FF0000;width:32px;height:32px;color:#fff;text-align:center">0x16
	* </td>
	* <td style="border:0px;background-color:#DA6D00;width:32px;height:32px;color:#fff;text-align:center">0x17
	* </td>
	* <td style="border:0px;background-color:#916D00;width:32px;height:32px;color:#fff;text-align:center">0x18
	* </td>
	* <td style="border:0px;background-color:#249100;width:32px;height:32px;color:#fff;text-align:center">0x19
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x1A
	* </td>
	* <td style="border:0px;background-color:#00B66D;width:32px;height:32px;color:#fff;text-align:center">0x1B
	* </td>
	* <td style="border:0px;background-color:#009191;width:32px;height:32px;color:#fff;text-align:center">0x1C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x20
	* </td>
	* <td style="border:0px;background-color:#6DB6FF;width:32px;height:32px;color:#000;text-align:center">0x21
	* </td>
	* <td style="border:0px;background-color:#9191FF;width:32px;height:32px;color:#000;text-align:center">0x22
	* </td>
	* <td style="border:0px;background-color:#DA6DFF;width:32px;height:32px;color:#000;text-align:center">0x23
	* </td>
	* <td style="border:0px;background-color:#FF00FF;width:32px;height:32px;color:#000;text-align:center">0x24
	* </td>
	* <td style="border:0px;background-color:#FF6DFF;width:32px;height:32px;color:#000;text-align:center">0x25
	* </td>
	* <td style="border:0px;background-color:#FF9100;width:32px;height:32px;color:#000;text-align:center">0x26
	* </td>
	* <td style="border:0px;background-color:#FFB600;width:32px;height:32px;color:#000;text-align:center">0x27
	* </td>
	* <td style="border:0px;background-color:#DADA00;width:32px;height:32px;color:#000;text-align:center">0x28
	* </td>
	* <td style="border:0px;background-color:#6DDA00;width:32px;height:32px;color:#000;text-align:center">0x29
	* </td>
	* <td style="border:0px;background-color:#00FF00;width:32px;height:32px;color:#000;text-align:center">0x2A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x2B
	* </td>
	* <td style="border:0px;background-color:#00FFFF;width:32px;height:32px;color:#000;text-align:center">0x2C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x30
	* </td>
	* <td style="border:0px;background-color:#B6DAFF;width:32px;height:32px;color:#000;text-align:center">0x31
	* </td>
	* <td style="border:0px;background-color:#DAB6FF;width:32px;height:32px;color:#000;text-align:center">0x32
	* </td>
	* <td style="border:0px;background-color:#FFB6FF;width:32px;height:32px;color:#000;text-align:center">0x33
	* </td>
	* <td style="border:0px;background-color:#FF91FF;width:32px;height:32px;color:#000;text-align:center">0x34
	* </td>
	* <td style="border:0px;background-color:#FFB6B6;width:32px;height:32px;color:#000;text-align:center">0x35
	* </td>
	* <td style="border:0px;background-color:#FFDA91;width:32px;height:32px;color:#000;text-align:center">0x36
	* </td>
	* <td style="border:0px;background-color:#FFFF48;width:32px;height:32px;color:#000;text-align:center">0x37
	* </td>
	* <td style="border:0px;background-color:#FFFF6D;width:32px;height:32px;color:#000;text-align:center">0x38
	* </td>
	* <td style="border:0px;background-color:#B6FF48;width:32px;height:32px;color:#000;text-align:center">0x39
	* </td>
	* <td style="border:0px;background-color:#91FF6D;width:32px;height:32px;color:#000;text-align:center">0x3A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x3B
	* </td>
	* <td style="border:0px;background-color:#91DAFF;width:32px;height:32px;color:#000;text-align:center">0x3C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3F
	* </td></tr></tbody></table>
	* <h2>Note:</h2>
	* <p>These colors vary depending on TV/Console/Emulator in which the game plays</p>
	* */
    $setSpritesPalette(Byte index, Byte[4] palette) {
    	!	LDA #>$3F10         !
    	!	STA ?$PPUADDR?      !
    	!	LDA ?index?         !
    	!	ASL A               !
    	!	ASL A               !
    	!	CLC                 !
    	!	ADC #<$3F10         !
    	!	STA ?$PPUADDR?      !
    	!	                    !
    	!	LDY #0              !
    	!-loop:                 !
    	!	LDA (?palette?), Y  !
    	!	STA ?$PPUDATA?      !
    	!	INY                 !
    	!	CPY #4              !
    	!	BNE -loop           !
    }
    
    /*
    * <p>Load one sprite palette color.</p>
    * <h2>Parameters:</h2>
    * <ul>
    * <li><b>idx</b>: the index of the palette from 0 to 15</li>
    * <li><b>color</b>: a color from the NES palette</li>
    * </ul>
    */
    $setSpritesPaletteColor(Byte idx, Byte color) {
    	!	LDA #>$3F10    !
    	!	STA ?$PPUADDR? !
    	!	CLC            !
    	!	LDA ?idx?      !
    	!	ADC #<$3F10    !
    	!	STA ?$PPUADDR? !
    	!	LDA ?color?    !
    	!	STA ?$PPUDATA? !
    }
    
    /*
     * <p>Draws a sprite at a given position on screen with proper effects and palette.</p>
     * <h2>Parameters:</h2>
     * <ul>
     * <li><b>number: </b>the sprite number from 0 to 63 (PPU supports 64 sprites at all)</li>
     * <li><b>xOffset: </b>the horizontal position on the screen in pixels: 0 is on leftmost and 255 is the rightmost</li>
     * <li><b>yOffset: </b>the vertical position on the screen in pixels: 0 is on topmost and 239 is the bottommost</li>
     * <li><b>sprite: </b>the tile index from the pattern table starting at 0</b></li>
     * <li><b>options: </b>the rendering effects and the palette index (0 to 3) from the palettes.<br>
     *  For effects see PPU.$SPRITE_BEHIND_BACKGROUND, PPU.$SPRITE_MIRROR and PPU.$SPRITE_FLIP</li>
     * </ul>
     * <h2>Example:</h2>
     * <pre>
     * // Draws the sprite number 0 at position 1x2 using the 4th tile with mirror and flip effects and the 2nd palette   
     * PPU.$drawSprite(0, 1, 2, 3, PPU.$SPRITE_MIRROR | PPU.$SPRITE_FLIP | 1)
     * </pre>
     * <h2>Note:</h2>
     * <p>This is made by DMA so the method <i>flushSprites()</i> must be called to transfer it to the PPU OAM</p>
     */
    $drawSprite(Byte number, Byte xOffset, Byte yOffset, Byte sprite, Byte options) {
    	!	LDA ?number?  !
		!	ASL A         !
		!	ASL A         !
		!	TAX           !
		!	LDA ?yOffset? !
		!	STA $0200, X  !
		!	LDA ?xOffset? !
		!	STA $0203, X  !
		!	LDA ?sprite?  !
		!	STA $0201, X  !
		!	LDA ?options? !
		!	STA $0202, X  !
	}
    
    /*
     * <p>Set a name table data.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>data: </b>a 30 rows by 32 columns table containing tiles indices from the pattern table</li>
     * </ul>
     */
    $setNameTable(Int nameTable, Byte[30][32] data) {
    	!	LDA ?$PPUSTATUS?     !
    	!	LDA ?nameTable? + 1     !
    	!	STA ?$PPUADDR?       !
    	!	LDA ?nameTable? + 0     !
    	!	STA ?$PPUADDR?       !
    	!	LDX #3               !
    	!	LDY #0               !
    	!-loop:                  !
    	!	LDA (?data?), Y !
    	!	STA ?$PPUDATA?       !
    	!	INY                  !
    	!	BNE -loop            !
    	!	INC ?data? + 1  !
    	!	DEX                  !
    	!	BNE -loop            !
    	!-frag:                  !
    	!	LDA (?data?), Y !
    	!	STA ?$PPUDATA?       !
    	!	INY                  !
    	!	CPY #$C0             !
    	!	BNE -frag            !
    }
    
    /*
     * <p>Set the value of one cell of a name table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rowOffset: </b>the vertical position in the name table: 0 is the topmost and 29 is the bottommost</li>
     * <li><b>colOffset: </b>the horizontal position in the name table: 0 is the leftmost and 31 is the rightmost</li>
     * <li><b>tile: </b>the index of the tile to be drawn from the pattern table</li>
     * </ul>
     */
    $setNameTableTile(Int nameTable, Byte rowOffset, Byte colOffset, Byte tile) {
    	!	LDA ?$PPUSTATUS?           !
    	offset : rowOffset * 32 + colOffset
		!	CLC                        !
		!	LDA ?offset? + 0           !
		!	ADC ?nameTable? + 0           !
		!	STA ?nameTable? + 0           !
		!	LDA ?offset? + 1           !
		!	ADC ?nameTable? + 1           !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?nameTable? + 0           !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?tile?                 !
    	!	STA ?$PPUDATA?             !
    }
    
    /*
     * <p>Set the data of a row of a name table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rowOffset: </b>the vertical position in the name table: 0 is the topmost and 29 is the bottommost.<br>
     * Also used to get the row from the data table</li>
     * <li><b>data: </b>a 30 rows by 32 columns table containing tiles indices from the pattern table</li>
     * </ul>
     */
    $setNameTableRow(Int nameTable, Byte rowOffset, Byte[30][32] data) {
    	offset : rowOffset * $SCREEN_WIDTH_TILES
    	!	LDA ?$PPUSTATUS?           !
    	!	CLC                        !
    	!	LDA ?offset? + 0           !
    	!	ADC ?data? + 0        !
    	!	STA ?data? + 0        !
    	!	LDA ?offset? + 1           !
    	!	ADC ?data? + 1        !
		!	STA ?data? + 1        !
    	!	CLC                        !
    	!	LDA ?offset? + 0           !
    	!	ADC ?nameTable? + 0           !
    	!	STA ?nameTable? + 0           !
    	!	LDA ?offset? + 1           !
    	!	ADC ?nameTable? + 1           !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?nameTable? + 0           !
    	!	STA ?$PPUADDR?             !
    	!	LDY #0                     !
    	!-loop:                        !
    	!	LDA (?data?), Y       !
    	!	STA ?$PPUDATA?             !
    	!	INY                        !
    	!	CPY #?$SCREEN_WIDTH_TILES? !
    	!	BNE -loop                  !
    }
    
    /*
     * <p>Set the data of a column of a name table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>colOffset: </b>the horizontal position in the name table: 0 is the leftmost and 31 is the rightmost.<br>
     * Also used to get the column from data table</li>
     * <li><b>data: </b>a 30 rows by 32 columns table containing tiles indices from the pattern table</li>
     * </ul>
     */
    $setNameTableColumn(Int nameTable, Byte colOffset, Byte[30][32] data) {
    	!	LDY #0                      !
    	!	LDX #?$SCREEN_HEIGHT_TILES? !
    	!	LDA #%00000100              !
    	!	STA ?$PPUCTRL?              !
    	!	LDA ?$PPUSTATUS?            !
    	!	LDA ?nameTable? + 1            !
    	!	STA ?$PPUADDR?              !
    	!	LDA ?colOffset?             !
    	!	STA ?$PPUADDR?              !
    	!-loop:                         !
    	!	CLC                         !
    	!	ADC ?data? + 0         !
    	!	STA ?data? + 0         !
    	!	LDA #0                      !
    	!	ADC ?data? + 1         !
    	!	STA ?data? + 1         !
    	!	LDA (?data?), Y        !
    	!	STA ?$PPUDATA?              !
    	!	LDA #?$SCREEN_WIDTH_TILES?  !
    	!	DEX                         !
    	!	BNE -loop                   !
    	!	LDA ?$ctrl?                 !
    	!	STA ?$PPUCTRL?              !
    }
    
    /*
     * <p>Set a section of data of a name table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rowOffset: </b>the vertical position in the name table: 0 is the topmost and 29 is the bottommost</li>
     * <li><b>colOffset: </b>the horizontal position in the name table: 0 is the leftmost and 31 is the rightmost</li>
     * <li><b>data: </b>an arbitrary length table containing tiles indices from the pattern table</li>
     * </ul>
     * <h2>Note:</h2>
     * <p>Calling this method with rowOffset=0, colOffset=0 and a 30x32 name table is the same of invoking <i>$setNameTable(Int nameTable, Byte[30][32] data)</i>.<br>
     * In such case prefer the second method for better performance</p>
     */
    $setNameTableSection(Int nameTable, Byte rowOffset, Byte colOffset, Byte[][] data) {
    	offset : rowOffset * 32 + colOffset
    	!	LDA ?$PPUSTATUS?                 !
    	nameTable += offset
    	!	LDX ?data.length?    !
    	!	BNE +loop                        !
    	!--loop:                             !
    	!	CLC                              !
    	!	LDA ?data? + 0       !
    	!	ADC ?data[0].length? !
    	!	STA ?data? + 0       !
    	!	LDA ?data? + 1       !
    	!	ADC #0                           !
    	!	STA ?data? + 1       !
    	!	CLC                              !
    	!	LDA ?nameTable? + 0                 !
    	!	ADC #?$SCREEN_WIDTH_TILES?       !
    	!	STA ?nameTable? + 0                 !
    	!	LDA ?nameTable? + 1                 !
    	!	ADC #0                           !
    	!	STA ?nameTable? + 1                 !
    	!+loop:                              !
    	!	STA ?$PPUADDR?                   !
    	!	LDA ?nameTable? + 0                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDY #0                           !
    	!-loop:                              !
    	!	LDA (?data?), Y      !
    	!	STA ?$PPUDATA?                   !
    	!	INY                              !
    	!	CPY ?data[0].length? !
    	!	BNE -loop                        !
    	!	DEX                              !
    	!	BNE --loop                       !
    }
    
    /*
     * <p>Set a row section of data of a name table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rolOffset: </b>the vertical position in the name table: 0 is the topmost and 29 is the bottommost</li>
     * <li><b>colOffset: </b>the horizontal position in the name table: 0 is the leftmost and 31 is the rightmost</li>
     * <li><b>dataRow: </b>which row from the data table will be used to set</li>
     * <li><b>data: </b>an arbitrary length table containing tiles indices from the pattern table</li>
     * </ul>
     * <h2>Note:</h2>
     * <p>Calling this method with rowOffset=sectionRow, colOffset=0 and a 30x32 name table is the same of invoking <i>$setBackgroundRow(Int nameTable, Byte rowOffset, Byte[30][32] data)</i>.<br>
     * In such case prefer the second method for better performance</p>
     */
    $setNameTableRowSection(Int nameTable, Byte rowOffset, Byte colOffset, Byte dataRow, Byte[][] data) {
    	screenOffset : rowOffset * $SCREEN_WIDTH_TILES + colOffset
    	sectionOffset : dataRow * data[0].length
    	!	LDA ?$PPUSTATUS?                 !
    	!	CLC                              !
    	!	LDA ?sectionOffset? + 0          !
    	!	ADC ?data? + 0       !
    	!	STA ?data? + 0       !
    	!	LDA ?sectionOffset? + 1          !
    	!	ADC ?data? + 1       !
		!	STA ?data? + 1       !
    	!	CLC                              !
    	!	LDA ?screenOffset? + 0           !
    	!	ADC ?nameTable? + 0                 !
    	!	STA ?nameTable? + 0                 !
    	!	LDA ?screenOffset? + 1           !
    	!	ADC ?nameTable? + 1                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDA ?nameTable? + 0                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDY #0                           !
    	!-loop:                              !
    	!	LDA (?data?), Y      !
    	!	STA ?$PPUDATA?                   !
    	!	INY                              !
    	!	CPY ?data[0].length? !
    	!	BNE -loop                        !
    }
    
    /*
     * <p>Set a column section of data of a name table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rolOffset: </b>the vertical position in the name table: 0 is the topmost and 29 is the bottommost</li>
     * <li><b>colOffset: </b>the horizontal position in the name table: 0 is the leftmost and 31 is the rightmost</li>
     * <li><b>dataCol: </b>which column from the name table will be used to set</li>
     * <li><b>data: </b>an arbitrary length table containing tiles indices from the pattern table</li>
     * </ul>
     * <h2>Note:</h2>
     * <p>Calling this method with rowOffset=0, colOffset=sectionCol and a 30x32 name table is the same of invoking <i>$setNameTableColumn(Int nameTable, Byte colOffset, Byte[30][32] data)</i>.<br>
     * In such case prefer the second method for better performance</p>
     */
    $setNameTableColumnSection(Int nameTable, Byte rowOffset, Byte colOffset, Byte dataCol, Byte[][] data) {
    	screenOffset : rowOffset * $SCREEN_WIDTH_TILES + colOffset
    	!	LDY #0                           !
    	!	LDX ?data.length?    !
    	!	LDA #%00000100                   !
    	!	STA ?$PPUCTRL?                   !
    	!	LDA ?$PPUSTATUS?                 !
    	!	LDA ?screenOffset? + 0           !
    	!	ADC ?nameTable? + 0                 !
    	!	STA ?nameTable? + 0                 !
    	!	LDA ?screenOffset? + 1           !
    	!	ADC ?nameTable? + 1                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDA ?nameTable? + 0                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDA ?dataCol?                 !
    	!-loop:                              !
    	!	CLC                              !
    	!	ADC ?data? + 0       !
    	!	STA ?data? + 0       !
    	!	LDA #0                           !
    	!	ADC ?data? + 1       !
    	!	STA ?data? + 1       !
    	!	LDA (?data?), Y      !
    	!	STA ?$PPUDATA?                   !
    	!	LDA ?data[0].length? !
    	!	DEX                              !
    	!	BNE -loop                        !
    	!	LDA ?$ctrl?                      !
    	!	STA ?$PPUCTRL?                   !
    }
    
    /*
     * <p>Set the data of a name table and the respective attribute table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which of the four name tables to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>data: </b>a flat array formed by:
     * <ol>
     * <li>906 bytes of tiles indices from the pattern table to fill the name table</li> 
     * <li>64 bytes of palette indices to fill the attribute table</li>
     * </ol>
     * </ul>
     */
    $setNameAndAttributeTables(Int nameTable, Byte[1024] data) {
    	!	LDA ?$PPUSTATUS?                 !
    	!	LDA ?nameTable? + 1                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDA ?nameTable? + 0                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDX #4                           !
    	!	LDY #0                           !
    	!-loop:                              !
    	!	LDA (?data?), Y !
    	!	STA ?$PPUDATA?                   !
    	!	INY                              !
    	!	BNE -loop                        !
    	!	INC ?data? + 1  !
    	!	DEX                              !
    	!	BNE -loop                        !
    }
    
    /*
     * <p>Set the data of an attribute table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which name table corresponding to the attribute table to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>data: </b>an 8 row by 8 column table in which each cell has the palette index used to color a 4x4 tile region of the background</li>
     * </ul>
     */
    $setAttributeTable(Int nameTable, Byte[8][8] data) {
    	!	LDA ?$PPUSTATUS?          !
    	!	CLC                       !
    	!	LDA ?nameTable? + 1          !
    	!	ADC #>$03C0               !
    	!	STA ?$PPUADDR?            !
    	!	LDA #<$03C0               !
    	!	STA ?$PPUADDR?            !
    	!	LDY #0                    !
    	!-loop:                       !
    	!	LDA (?data?), Y !
    	!	STA ?$PPUDATA?            !
    	!	INY                       !
    	!	CPY #64                   !
    	!	BNE -loop                 !
    }
    
    /*
     * <p>Set a row of data of an attribute table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which name table corresponding to the attribute table to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rowOffset: </b>which row of the attribute table will be set</li>
     * <li><b>data: </b>an 8 row by 8 column table in which each cell has the palette index used to color a 4x4 tile region of the background</li>
     * </ul>
     */
    $setAttributeTableRow(Int nameTable, Byte rowOffset, Byte[8][8] data) {
    	!	LDA ?$PPUSTATUS?          !
		!	LDA ?rowOffset?           !
    	!	ASL A                     !
    	!	ASL A                     !
    	!	ASL A                     !
    	!	TAY                       !
    	!	CLC                       !
    	!	ADC #<$03C0               !
    	!	STA ?nameTable? + 0          !
    	!	LDA ?nameTable? + 1          !
    	!	ADC #>$03C0               !
    	!	STA ?$PPUADDR?            !
    	!	LDA ?nameTable? + 0          !
    	!	STA ?$PPUADDR?            !
    	!	LDX #8                    !
    	!-loop:                       !
    	!	LDA (?data?), Y !
    	!	STA ?$PPUDATA?            !
    	!	INY                       !
    	!	DEX                       !
    	!	BNE -loop                 !
    }
    
    /*
     * <p>Set a column of data of an attribute table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which name table corresponding to the attribute table to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>colOffset: </b>which column of the attribute table will be set</li>
     * <li><b>data: </b>an 8 row by 8 column table in which each cell has the palette index used to color a 4x4 tile region of the background</li>
     * </ul>
     */
    $setAttributeTableColumn(Int nameTable, Byte colOffset, Byte[8][8] data) {
    	!	LDA ?$PPUSTATUS?          !
    	!	LDX #8                    !
		!	LDA ?colOffset?           !
    	!	TAY                       !
    	!	CLC                       !
    	!	ADC #<$03C0               !
    	!	STA ?nameTable? + 0          !
    	!	LDA ?nameTable? + 1          !
    	!	ADC #>$03C0               !
    	!	STA ?nameTable? + 1          !
    	!-loop:                       !
    	!	STA ?$PPUADDR?            !
    	!	LDA ?nameTable? + 0          !
    	!	STA ?$PPUADDR?            !
    	!	LDA (?data?), Y !
    	!	STA ?$PPUDATA?            !
    	!	DEX                       !
    	!	BEQ +done                 !
    	!	TYA                       !
    	!	ADC #8                    !
    	!	TAY                       !
    	!	LDA ?nameTable? + 0          !
    	!	ADC #8                    !
    	!	STA ?nameTable? + 0          !
    	!	LDA ?nameTable? + 1          !
    	!	BNE -loop                 !
    	!+done:                       !
    }
    
    /*
     * <p>Set the data of a cell in an attribute table.</p>
     * <h1>Parameters:</h1>
     * <ul>
     * <li><b>nameTable: </b>which name table corresponding to the attribute table to be set.<br>
     * See PPU.$NAME_TABLE_TOP_LEFT, PPU.$NAME_TABLE_TOP_RIGHT, PPU.$NAME_TABLE_BOTTOM_LEFT and PPU.$NAME_TABLE_BOTTOM_RIGHT</li>
     * <li><b>rowOffset: </b>the vertical position in the attribute table: 0 is the topmost and 7 is the bottommost</li>
     * <li><b>colOffset: </b>the horizontal position in the attribute table: 0 is the leftmost and 7 is the rightmost</li>
     * <li><b>data: </b>the palette index used to color a 4x4 tile region of the background</li>
     * </ul>
     */
    $setAttributeTableCell(Int nameTable, Byte rowOffset, Byte colOffset, Byte data) {
    	!	LDA ?$PPUSTATUS? !
    	!	LDA ?rowOffset?  !
    	!	ASL A            !
    	!	ASL A            !
    	!	ASL A            !
    	!	CLC              !
    	!	ADC ?colOffset?  !
    	!	ADC #<$03C0      !
    	!	STA ?nameTable? + 0 !
    	!	LDA ?nameTable? + 1 !
    	!	ADC #>$03C0      !
    	!	STA ?$PPUADDR?   !
    	!	LDA ?nameTable? + 0 !
    	!	STA ?$PPUADDR?   !
    	!	LDA ?data?  !
    	!	STA ?$PPUDATA?   !
    }
    
    /*
     * <h2>Returns:</h2>
     * <p>the name table address setted on the <i>$ctrl</i> byte</p>
     * <h2>Note:</h2>
     * <p>This value may not be written to PPUCTRL yet. Call <i>$update()</i> or <i>$updateCtrl()</i> prior to call this method to do the write</p>
     */
    $currentNameTable() {
    	current : $NAME_TABLE_TOP_LEFT
    	!	LDA ?$ctrl?       !
    	!	AND #%00000011    !
    	!	ASL A             !
    	!	ASL A             !
    	!	CLC               !
    	!	ADC ?current? + 1 !
    	!	STA ?current? + 1 !
    	return current
    }
    
    /*
     * <h2>Returns:</h2>
     * <p>the next horizontal name table address relative to the one setted on the <i>$ctrl</i> byte</p>
     * <h2>Note:</h2>
     * <p>The value of the current name table on <i>$ctrl</i> may not be written to PPUCTRL yet. Call <i>$update()</i> or <i>$updateCtrl()</i> prior to call this method to do the write</p>
     */
    $nextHorizontalNameTable() {
    	next : $NAME_TABLE_TOP_LEFT
    	!	LDA ?$ctrl?    !
    	!	AND #%00000011 !
    	!	EOR #%00000001 !
    	!	ASL A          !
    	!	ASL A          !
    	!	CLC            !
    	!	ADC ?next? + 1 !
    	!	STA ?next? + 1 !
    	return next
    }
    
    /*
     * <h2>Returns:</h2>
     * <p>the next vertical name table address relative to the one setted on the <i>$ctrl</i> byte</p>
     * <h2>Note:</h2>
     * <p>The value of the current name table on <i>$ctrl</i> may not be written to PPUCTRL yet. Call <i>$update()</i> or <i>$updateCtrl()</i> prior to call this method to do the write</p>
     */
    $nextVerticalNameTable() {
    	next : $NAME_TABLE_TOP_LEFT
    	!	LDA ?$ctrl?    !
    	!	AND #%00000011 !
    	!	EOR #%00000010 !
    	!	ASL A          !
    	!	ASL A          !
    	!	CLC            !
    	!	ADC ?next? + 1 !
    	!	STA ?next? + 1 !
    	return next
    }
    
    /*
     * <p>Swaps the current name table address to it's horizontal neighbor.</p>
     * <h2>Notes:</h2>
     * <p>The value of the current name table on <i>$ctrl</i> may not be written to PPUCTRL yet. Call <i>$update()</i> or <i>$updateCtrl()</i> prior to call this method to do the write</p>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
     */
    $swapNameTablesHorizontally() @Inline {
    	!	LDA ?$ctrl?    !
    	!	EOR #%00000001 !
    	!	STA ?$ctrl?    !
    }
    
    /*
     * <p>Swaps the current name table address to it's vertical neighbor.</p>
     * <h2>Notes:</h2>
     * <p>The value of the current name table on <i>$ctrl</i> may not be written to PPUCTRL yet. Call <i>$update()</i> or <i>$updateCtrl()</i> prior to call this method to do the write</p>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
     */
    $swapNameTablesVertically() @Inline {
    	!	LDA ?$ctrl?    !
    	!	EOR #%00000010 !
    	!	STA ?$ctrl?    !
    }
    
    /*
     * <p>Waits till the beginning of a vertical blanking interval.</p>
     */
    $waitVBlank() @Inline {
    	!-waitVBlank:        !
    	!	BIT ?$PPUSTATUS? !
		!	BPL -waitVBlank  !
    }
    
    /*
     * <p>Waits till a "sprite 0 hits" occurs.</p>
     * <p>Sprites are conventionally numbered 0 to 63. Sprite 0 is the sprite controlled by OAM addresses $00-$03, sprite 1 is controlled by $04-$07, ..., and sprite 63 is controlled by $FC-$FF.<br>
     * While the PPU is drawing the picture, when an opaque pixel of sprite 0 overlaps an opaque pixel of the background, this is a sprite zero hit. The PPU detects this condition and sets bit 6 of PPUSTATUS ($2002) to 1 starting at this pixel, letting the CPU know how far along the PPU is in drawing the picture.</p>
     * <p>Sprite 0 hit does not happen:</p>
     * <ul>
     * <li> If background or sprite rendering is disabled in PPUMASK.</li>
	 * <li> At x=0 to x=7 if the left-side clipping window is enabled (if bit 2 or bit 1 of PPUMASK is 0).</li>
	 * <li> At x=255, for an obscure reason related to the pixel pipeline.</li>
	 * <li> At any pixel where the background or sprite pixel is transparent (2-bit color index from the CHR pattern is&nbsp;%00).</li>
	 * <li> If sprite 0 hit has already occurred this frame. Bit 6 of PPUSTATUS ($2002) is cleared to 0 at dot 1 of the pre-render line. This means only the first sprite 0 hit in a frame can be detected.</li>
	 * </ul>
	 * <p>Sprite 0 hit happens regardless of the following:</p>
	 * <ul>
	 * <li> Sprite priority. Sprite 0 can still hit the background from behind.</li>
	 * <li> The pixel colors. Only the CHR pattern bits are relevant, not the actual rendered colors, and <i>any</i> CHR color index except&nbsp;%00 is considered opaque.</li>
	 * <li> The palette. The contents of the palette are irrelevant to sprite 0 hits. For example: a black ($0F) sprite pixel can hit a black ($0F) background as long as neither is the transparent color index&nbsp;%00.</li>
	 * <li> The PAL PPU blanking on the left and right edges at x=0, x=1, and x=254.</li>
	 * </ul>
	 * <h2>Warning:</h2>
	 * <p>If the hit not happens for some of the reason listed above, the game will hangs forever</p>
     */
    $waitSprite0Hit() @Inline {
    	!-waitSprite0Clear:       !
		!	BIT ?$PPUSTATUS?      !
		!	BVS -waitSprite0Clear !
		!-waitSprite0Hit:         !
		!	BIT ?$PPUSTATUS?      !
		!	BVC -waitSprite0Hit   !
    }
    
    /*
     * <p>Transfer 256 bytes from memory address 0x0200 to PPU OAM.</p>
     */
    $flushSprites() @Inline {
	    !	LDA #<$0200    !
		!	STA ?$OAMADDR? !
		!	LDA #>$0200    !
		!	STA ?$OAMDMA?  !
    }
    
    /*
     * <p>Reads the PPUSTATUS register.</p>
     */
    $readStatus() @Inline {
    	!	LDA ?$PPUSTATUS? !
    }
    
    /*
     * <p>Clears the PPUADDR register.</p>
     */
    $clearAddr() @Inline {
    	!	LDA #0         !
    	!	STA ?$PPUADDR? !
    	!	STA ?$PPUADDR? !
    }

	/*
     * <p>Clears the PPUCTRL register.</p>
     * <h2>Note:</h2>
     * <p>The <i>$ctrl</i> byte remains intact</p>
     */    
    $clearCtrl() @Inline {
    	!	LDA #0     !
    	!	?$PPUCTRL? !
    }
    
    /*
     * <p>Clears the PPUMASK register.</p>
     * <h2>Note:</h2>
     * <p>The <i>$mask</i> byte remains intact</p>
     */
    $clearMask() @Inline {
    	!	LDA #0         !
    	!	STA ?$PPUMASK? !
    }
    
    /*
     * <p>Clears the PPUSCROLL register.</p>
     * <h2>Note:</h2>
     * <p>The <i>$scrollX</i> and <i>$scrollY</i> bytes remains intact</p>
     */
    $clearScroll() {
    	!	LDA #0           !
    	!	STA ?$PPUSCROLL? !
    	!	STA ?$PPUSCROLL? !
    }
    
    /*
     * <p>Update the PPU registers.</p>
     * <p>This method does these steps:</p>
     * <ol>
     * <li>Clears the PPUADDR register</i>
     * <li>Writes the <i>$ctrl</i> byte to the PPUCTRL register</li>
     * <li>Writes the <i>$mask</i> byte to the PPUMASK register</li>
     * <li>Writes the <i>$scrollX</i> and <i>$scrollY</i> bytes to PPUSCROLL register</li>
     * </ol>
     */
    $update() @Inline {
    	$clearAddr
		$updateCtrl
    	$updateMask
    	$updateScroll
    }

	/*
	 * <p>Writes the <i>$ctrl</i> byte to the PPUCTRL register.</p>
	 */
    $updateCtrl() @Inline {
    	!	LDA ?$ctrl?      !
    	!	STA ?$PPUCTRL?   !
    }
    
    /*
     * <p>Writes the <i>$mask</i> byte to the PPUMASK register.</p>
     */
    $updateMask() @Inline {
    	!	LDA ?$mask?      !
    	!	STA ?$PPUMASK?   !
    }
    
    /*
     * <p>Writes the <i>$scrollX</i> and <i>$scrollY</i> bytes to PPUSCROLL register.</p>
     */
    $updateScroll() @Inline {
    	!	LDA ?$scrollX?   !
    	!	STA ?$PPUSCROLL? !
    	!	LDA ?$scrollY?   !
    	!	STA ?$PPUSCROLL? !
    }
    
}