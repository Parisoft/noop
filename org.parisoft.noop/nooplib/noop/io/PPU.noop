PPU {
	
	/*
	 * <p>Screen number 0 localized at top left</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   <b>$2000</b>   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$SCREEN_TOP_LEFT : 0x2000
	
	/*
	 * <p>Screen number 1 localized at top right</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   <b>$2400</b>   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$SCREEN_TOP_RIGHT : 0x2400
	
	/*
	 * <p>Screen number 2 localized at bottom left</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   <b>$2800</b>   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$SCREEN_BOTTOM_LEFT : 0x2800
	
	/*
	 * <p>Screen number 3 localized at bottom right</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   <b>$2C00</b>   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 */
	$SCREEN_BOTTOM_RIGHT : 0x2C00
	
	/*
	 * <p>Number of width pixels on the screen</p>
	 */
	$SCREEN_WIDTH_PX : 256
	
	/*
	 * <p>Number of height pixels on the screen</p>
	 */
    $SCREEN_HEIGHT_PX : 240
    
    /*
     * <p>Number of width tiles on the screen<p>
     * <h2>Note:</h2>
     * <p>Each tile has 8 pixels</p>
     */
    $SCREEN_WIDTH_TILES : 32
    
    /*
     * <p>Number of height tiles on the screen<p>
     * <h2>Note:</h2>
     * <p>Each tile has 8 pixels</p>
     */
    $SCREEN_HEIGHT_TILES : 30
	
	/*
	 * <p>Various flags controlling PPU operation</p>
	 * <pre>7  bit  0
     * ---- ----
     * VPHB SINN
     * |||| ||||
     * |||| ||++- Base nametable address
     * |||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| |     (0: add 1, going across; 1: add 32, going down)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
	 */
	$PPUCTRL : 0x2000
	
	/*
	 * <p>This register controls the rendering of sprites and backgrounds, as well as colour effects</p>
	 * <pre>7  bit  0
     * ---- ----
     * BGRs bMmG
     * |||| ||||
     * |||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red*
     * |+-------- Emphasize green*
     * +--------- Emphasize blue*
     * 
     * * NTSC colors. PAL and Dendy swaps green and red
     * </pre>
	 */
	$PPUMASK : 0x2001
	
	/*
	 * <p>This register reflects the state of various functions inside the PPU. It is often used for determining timing. To determine when the PPU has reached a given pixel of the screen, put an opaque pixel of sprite 0 there</p>
	 * <pre>7  bit  0
     * ---- ----
     * VSO. ....
     * |||| ||||
     * |||+-++++- Least significant bits previously written into a PPU register
     * |||        (due to register not being updated for this address)
     * ||+------- Sprite overflow. The intent was for this flag to be set
     * ||         whenever more than eight sprites appear on a scanline, but a
     * ||         hardware bug causes the actual behavior to be more complicated
     * ||         and generate false positives as well as false negatives; see
     * ||         <a href="/w/index.php/PPU_sprite_evaluation" title="PPU sprite evaluation">PPU sprite evaluation</a>. This flag is set during sprite
     * ||         evaluation and cleared at dot 1 (the second dot) of the
     * ||         pre-render line.
     * |+-------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 overlaps
     * |          a nonzero background pixel; cleared at dot 1 of the pre-render
     * |          line.  Used for raster timing.
     * +--------- Vertical blank has started (0: not in vblank; 1: in vblank).
     *            Set at dot 1 of line 241 (the line *after* the post-render
     *            line); cleared after reading $2002 and at dot 1 of the
     *            pre-render line.
     * </pre>
	 */
	$PPUSTATUS : 0x2002
	
	/*
	 * <p>This register is used to change the scroll position, that is, to tell the PPU which pixel of the nametable selected through PPUCTRL should be at the top left corner of the rendered screen. Typically, this register is written to during vertical blanking, so that the next frame starts rendering from the desired location, but it can also be modified during rendering in order to split the screen. Changes made to the vertical scroll during rendering will only take effect on the next frame.</p>
	 */
	$PPUSCROLL : 0x2005
	
	/*
	 * <p>Because the CPU and the PPU are on separate buses, neither has direct access to the other's memory. The CPU writes to VRAM through a pair of registers on the PPU. First it loads an address into PPUADDR, and then it writes repeatedly to PPUDATA to fill VRAM.</p>
	 */
	$PPUADDR : 0x2006
	
	/*
	 * <p>VRAM read/write data register. After access, the video memory address will increment by an amount determined by $2000:2.</p>
	 */
	$PPUDATA : 0x2007
	
	/*
	 * <p>Write the address of OAM you want to access here. Most games just write $00 here and then use OAMDMA. (DMA is implemented in the 2A03/7 chip and works by repeatedly writing to OAMDATA)</p>
	 */
	$OAMADDR : 0x2003
	
	/*
	 * <p>Write OAM data here. Writes will increment OAMADDR after the write; reads during vertical or forced blanking return the value from OAM at that address but do not increment.</p>
     * <p>Because changes to OAM should normally be made only during vblank, writing through OAMDATA is only effective for partial updates (it is too slow). Most games will use the DMA feature through OAMDMA instead.</p>
	 */
	$OAMDATA : 0x2004
	
	/*
	 * <p>This port is located on the CPU. Writing $XX will upload 256 bytes of data from CPU page $XX00-$XXFF to the internal PPU OAM. This page is typically located in internal RAM, commonly $0200-$02FF, but cartridge RAM or ROM can be used as well.</p>
	 */
	$OAMDMA : 0x4014
	
	/*
	 * <p>Bits written to <i>$PPUCTRL</i> when <i>$update()</i> or <i>$updateCtrl()</i> is called</p>
	 * <h2>Default:</h2>
	 * <pre>
	 * 1001 0000
     * |||| ||||
     * |||| ||++- Base nametable address
     * |||| ||    (0 = <b>$2000</b>; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| |     (0: <b>add 1</b>, going across; 1: add 32, going down)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: <b>$0000</b>; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: <b>$1000</b>)
     * ||+------- Sprite size (0: <b>8x8</b>; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: <b>read backdrop from EXT pins</b>; 1: output color on EXT pins)
     * +--------- Generate an NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: <b>on</b>)
     * </pre>
	 */
	$ctrl : 0b10010000
	
	/*
	 * <p>Bits written to <i>$PPUMASK</i> when <i>$update()</i> is called</p>
	 * <h2>Default:</h2>
	 * <pre>
     * 0001 1110
     * |||| ||||
     * |||| |||+- Greyscale (0: <b>normal color</b>, 1: produce a greyscale display)
     * |||| ||+-- 1: <b>Show background in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| |+--- 1: <b>Show sprites in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| +---- 1: <b>Show background</b>
     * |||+------ 1: <b>Show sprites</b>
     * ||+------- <b>Emphasize red*</b>
     * |+-------- <b>Emphasize green*</b>
     * +--------- <b>Emphasize blue*</b>
     * 
     * * NTSC colors. PAL and Dendy swaps green and red
     * </pre>
	 */
	$mask : 0b00011110
	
	/*
	 * <p>Horizontal scroll value written to <i>$PPUSCROLL</i> when <i>$update()</i> is called</p>
	 */
	$scrollX : 0
	
	/*
	 * <p>Vertical scroll value written to <i>$PPUSCROLL</i> when <i>$update()</i> is called</p>
	 */
	$scrollY : 0
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 00, setting the screen address to 0x2000</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   <b>$2000</b>   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setScreenAtTopLeft() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111100 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 01, setting the screen address to 0x2400</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   <b>$2400</b>   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setScreenAtTopRight() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111100 !
		!	ORA #%00000001 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 10, setting the screen address to 0x2800</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   <b>$2800</b>   |   $2C00   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setScreenAtBottomLeft() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111100 !
		!	ORA #%00000010 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bits 0 and 1 of PPUCTRL to 11, setting the screen address to 0x2C00</p>
	 * <pre>     (0,0)     (256,0)     (511,0)
     *        +-----------+-----------+
     *        |           |           |
     *        |           |           |
     *        |   $2000   |   $2400   |
     *        |           |           |
     *        |           |           |
     * (0,240)+-----------+-----------+(511,240)
     *        |           |           |
     *        |           |           |
     *        |   $2800   |   <b>$2C00</b>   |
     *        |           |           |
     *        |           |           |
     *        +-----------+-----------+
     *      (0,479)   (256,479)   (511,479)
     * </pre>
	 * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setScreenAtBottomRight() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00000011 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUCTRL to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>0</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>++- Base nametable address
     * |||| |<b>|</b>    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |<b>+--- VRAM address increment per CPU read/write of PPUDATA</b>
     * |||| |<b>     (0: add 1, going across</b>; 1: add 32, going down)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setVramIncrementBy1GoingAcross() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11111011 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUCTRL to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>1</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>++- Base nametable address
     * |||| |<b>|</b>    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| |<b>+--- VRAM address increment per CPU read/write of PPUDATA</b>
     * |||| |     (0: add 1, going across; <b>1: add 32, going down</b>)
     * |||| +---- Sprite pattern table address for 8x8 sprites
     * ||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setVramIncrementBy32GoingDown() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00000100 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUCTRL to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>0</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>|++- Base nametable address
     * |||| <b>|</b>|    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| <b>|</b>+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| <b>|</b>     (0: add 1, going across; 1: add 32, going down)
     * |||| <b>+---- Sprite pattern table address for 8x8 sprites</b>
     * |||| <b>      (0: $0000</b>; 1: $1000; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 * <p>It's ignored if sprite size is set to 8x16</p>
	 */
	$setFirstPatternTableFor8x8Sprites() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11110111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUCTRL to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>1</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>|++- Base nametable address
     * |||| <b>|</b>|    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||| <b>|</b>+--- VRAM address increment per CPU read/write of PPUDATA
     * |||| <b>|</b>     (0: add 1, going across; 1: add 32, going down)
     * |||| <b>+---- Sprite pattern table address for 8x8 sprites</b>
     * ||||       (0: $0000; <b>1: $1000</b>; ignored in 8x16 mode)
     * |||+------ Background pattern table address (0: $0000; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 * <p>It's ignored if sprite size is set to 8x16</p>
	 */
	$setLastPatternTableFor8x8Sprites() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00001000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUCTRL to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>0</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> ||++- Base nametable address
     * |||<b>|</b> ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||<b>|</b> |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||<b>|</b> |     (0: add 1, going across; 1: add 32, going down)
     * |||<b>|</b> +---- Sprite pattern table address for 8x8 sprites
     * |||<b>|</b>       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||<b>+------ Background pattern table address (0: $0000</b>; 1: $1000)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setFirstPatternTableForBackground() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11101111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUCTRL to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>1</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> ||++- Base nametable address
     * |||<b>|</b> ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |||<b>|</b> |+--- VRAM address increment per CPU read/write of PPUDATA
     * |||<b>|</b> |     (0: add 1, going across; 1: add 32, going down)
     * |||<b>|</b> +---- Sprite pattern table address for 8x8 sprites
     * |||<b>|</b>       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |||<b>+------ Background pattern table address</b> (0: $0000; <b>1: $1000</b>)
     * ||+------- Sprite size (0: 8x8; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setLastPatternTableForBackground() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00010000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUCTRL to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>0</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| ||++- Base nametable address
     * ||<b>|</b>| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * ||<b>|</b>| |+--- VRAM address increment per CPU read/write of PPUDATA
     * ||<b>|</b>| |     (0: add 1, going across; 1: add 32, going down)
     * ||<b>|</b>| +---- Sprite pattern table address for 8x8 sprites
     * ||<b>|</b>|       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * ||<b>|</b>+------ Background pattern table address (0: $0000; 1: $1000)
     * ||<b>+------- Sprite size (0: 8x8</b>; 1: 8x16)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setSpriteSizeTo8x8() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%11011111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUCTRL to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>1</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| ||++- Base nametable address
     * ||<b>|</b>| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * ||<b>|</b>| |+--- VRAM address increment per CPU read/write of PPUDATA
     * ||<b>|</b>| |     (0: add 1, going across; 1: add 32, going down)
     * ||<b>|</b>| +---- Sprite pattern table address for 8x8 sprites
     * ||<b>|</b>|       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * ||<b>|</b>+------ Background pattern table address (0: $0000; 1: $1000)
     * ||<b>+------- Sprite size</b> (0: 8x8; <b>1: 8x16</b>)
     * |+-------- PPU master/slave select
     * |          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$setSpriteSizeTo8x16() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%00100000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUCTRL to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>0</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| ||++- Base nametable address
     * |<b>|</b>|| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |<b>|</b>|| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |<b>|</b>|| |     (0: add 1, going across; 1: add 32, going down)
     * |<b>|</b>|| +---- Sprite pattern table address for 8x8 sprites
     * |<b>|</b>||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |<b>|</b>|+------ Background pattern table address (0: $0000; 1: $1000)
     * |<b>|</b>+------- Sprite size (0: 8x8; 1: 8x16)
     * |<b>+-------- PPU master/slave select</b>
     * |<b>          (0: read backdrop from EXT pins</b>; 1: output color on EXT pins)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$enableMasterMode() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%10111111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUCTRL to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>1</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| ||++- Base nametable address
     * |<b>|</b>|| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * |<b>|</b>|| |+--- VRAM address increment per CPU read/write of PPUDATA
     * |<b>|</b>|| |     (0: add 1, going across; 1: add 32, going down)
     * |<b>|</b>|| +---- Sprite pattern table address for 8x8 sprites
     * |<b>|</b>||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * |<b>|</b>|+------ Background pattern table address (0: $0000; 1: $1000)
     * |<b>|</b>+------- Sprite size (0: 8x8; 1: 8x16)
     * |<b>+-------- PPU master/slave select</b>
     * |          (0: read backdrop from EXT pins; <b>1: output color on EXT pins</b>)
     * +--------- Generate a NMI at the start of the
     *            <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$disableMasterMode() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%01000000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUCTRL to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>1</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| ||++- Base nametable address
     * <b>|</b>||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * <b>|</b>||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * <b>|</b>||| |     (0: add 1, going across; 1: add 32, going down)
     * <b>|</b>||| +---- Sprite pattern table address for 8x8 sprites
     * <b>|</b>|||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * <b>|</b>||+------ Background pattern table address (0: $0000; 1: $1000)
     * <b>|</b>|+------- Sprite size (0: 8x8; 1: 8x16)
     * <b>|</b>+-------- PPU master/slave select
     * <b>|</b>          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * <b>+--------- Generate a NMI at the start of the</b>
     * <b>           <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a></b> (0: off; <b>1: on</b>)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$enableNMI() @Inline {
		!	LDA ?$ctrl?    !
		!	ORA #%10000000 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUCTRL to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>0</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| ||++- Base nametable address
     * <b>|</b>||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
     * <b>|</b>||| |+--- VRAM address increment per CPU read/write of PPUDATA
     * <b>|</b>||| |     (0: add 1, going across; 1: add 32, going down)
     * <b>|</b>||| +---- Sprite pattern table address for 8x8 sprites
     * <b>|</b>|||       (0: $0000; 1: $1000; ignored in 8x16 mode)
     * <b>|</b>||+------ Background pattern table address (0: $0000; 1: $1000)
     * <b>|</b>|+------- Sprite size (0: 8x8; 1: 8x16)
     * <b>|</b>+-------- PPU master/slave select
     * <b>|</b>          (0: read backdrop from EXT pins; 1: output color on EXT pins)
     * <b>+--------- Generate a NMI at the start of the</b>
     * <b>           <a href="https://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a></b> (<b>0: off</b>; 1: on)
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUCTRL register) call <i>$update()</i> or <i>$updateCtrl()</i></p>
	 */
	$disableNMI() @Inline {
		!	LDA ?$ctrl?    !
		!	AND #%01111111 !
		!	STA ?$ctrl?    !
	}
	
	/*
	 * <p>Sets bit 0 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xxx<b>0</b>
     * |||| |||<b>|</b>
     * |||| |||<b>+- Greyscale</b> (0: normal color, <b>1: produce a greyscale display</b>)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$enableGreyscale() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00000001 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 0 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xxx<b>1</b>
     * |||| |||<b>|</b>
     * |||| |||<b>+- Greyscale (0: normal color</b>, 1: produce a greyscale display)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$disableGreyscale() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11111110 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 1 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xx<b>1</b>x
     * |||| ||<b>|</b>|
     * |||| ||<b>|</b>+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| ||<b>+-- 1: Show background in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showBackgroundInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00000010 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 1 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx xx<b>1</b>x
     * |||| ||<b>|</b>|
     * |||| ||<b>|</b>+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| ||+-- 1: Show background in leftmost 8 pixels of screen, <b>0: Hide</b>
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideBackgroundInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11111101 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>1</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>|+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| |<b>|</b>+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |<b>+--- 1: Show sprites in leftmost 8 pixels of screen</b>, 0: Hide
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showSpritesInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00000100 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 2 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx x<b>0</b>xx
     * |||| |<b>|</b>||
     * |||| |<b>|</b>|+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| |<b>|</b>+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| |+--- 1: Show sprites in leftmost 8 pixels of screen, <b>0: Hide</b>
     * |||| +---- 1: Show background
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideSpritesInLeftmostColumn() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11111011 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>1</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| <b>|</b>|+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| <b>|</b>+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| <b>+---- 1: Show background</b>
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showBackground() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00001000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 3 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxxx <b>0</b>xxx
     * |||| <b>|</b>|||
     * |||| <b>|</b>||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||| <b>|</b>|+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||| <b>|</b>+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||| +---- 1: Show background; <b>0: Hide background</b>
     * |||+------ 1: Show sprites
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideBackground() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11110111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>1</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||<b>|</b> ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> +---- 1: Show background
     * |||<b>+------ 1: Show sprites</b>
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$showSprites() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00010000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 4 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * xxx<b>0</b> xxxx
     * |||<b>|</b> ||||
     * |||<b>|</b> |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |||<b>|</b> ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |||<b>|</b> +---- 1: Show background
     * |||+------ 1: Show sprites; <b>0: Hide sprites</b>
     * ||+------- Emphasize red
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Note:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 */
	$hideSprites() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11101111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>1</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * ||<b>|</b>| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| +---- 1: Show background
     * ||<b>|</b>+------ 1: Show sprites
     * ||<b>+------- Emphasize red</b>
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$enableRedEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%00100000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 5 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * xx<b>0</b>x xxxx
     * ||<b>|</b>| ||||
     * ||<b>|</b>| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * ||<b>|</b>| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * ||<b>|</b>| +---- 1: Show background
     * ||<b>|</b>+------ 1: Show sprites
     * ||<b>+------- Don't emphasize red</b>
     * |+-------- Emphasize green
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$disableRedEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	AND #%11011111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>1</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |<b>|</b>|| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| +---- 1: Show background
     * |<b>|</b>|+------ 1: Show sprites
     * |<b>|</b>+------- Emphasize red
     * |<b>+-------- Emphasize green</b>
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$enableGreenEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%01000000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 6 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * x<b>0</b>xx xxxx
     * |<b>|</b>|| ||||
     * |<b>|</b>|| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * |<b>|</b>|| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * |<b>|</b>|| +---- 1: Show background
     * |<b>|</b>|+------ 1: Show sprites
     * |<b>|</b>+------- Emphasize red
     * |<b>+-------- Don't emphasize green</b>
     * +--------- Emphasize blue
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$disableGreenEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	AND #%10111111 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUMASK to 1</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>1</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * <b>|</b>||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| +---- 1: Show background
     * <b>|</b>||+------ 1: Show sprites
     * <b>|</b>|+------- Emphasize red
     * <b>|</b>+-------- Emphasize green
     * <b>+--------- Emphasize blue</b>
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$enableBlueEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	ORA #%10000000 !
		!	STA ?$mask?    !
	}
	
	/*
	 * <p>Sets bit 7 of PPUMASK to 0</p>
	 * <pre>7  bit  0
     * ---- ----
     * <b>0</b>xxx xxxx
     * <b>|</b>||| ||||
     * <b>|</b>||| |||+- Greyscale (0: normal color, 1: produce a greyscale display)
     * <b>|</b>||| ||+-- 1: Show background in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| |+--- 1: Show sprites in leftmost 8 pixels of screen, 0: Hide
     * <b>|</b>||| +---- 1: Show background
     * <b>|</b>||+------ 1: Show sprites
     * <b>|</b>|+------- Emphasize red
     * <b>|</b>+-------- Emphasize green
     * <b>+--------- Don't emphasize blue</b>
     * </pre>
     * <h2>Notes:</h2>
	 * <p>For this change to take effect (to be written to PPUMASK register) call <i>$update()</i> or <i>$updateMask()</i></p>
	 * <p>PAL and Dendy swaps green and red</p>
	 */
	$disableBlueEmphasis() @Inline {
		!	LDA ?$mask?    !
		!	AND #%01111111 !
		!	STA ?$mask?    !
	}
	
	/*
    * <p>Load the background palettes</p>
    * <h2>Parameters</h2>
    * <ul>
    * <li><b>palettes</b>: an array containing 16 colors from NES palette</li>
    * </ul>
    * <h2>NES palette colors</h2>
	* <table class="wikitable">
	* <tbody><tr>
	* <td style="border:0px;background-color:#6D6D6D;width:32px;height:32px;color:#fff;text-align:center">0x00
	* </td>
	* <td style="border:0px;background-color:#002491;width:32px;height:32px;color:#fff;text-align:center">0x01
	* </td>
	* <td style="border:0px;background-color:#0000DA;width:32px;height:32px;color:#fff;text-align:center">0x02
	* </td>
	* <td style="border:0px;background-color:#6D48DA;width:32px;height:32px;color:#fff;text-align:center">0x03
	* </td>
	* <td style="border:0px;background-color:#91006D;width:32px;height:32px;color:#fff;text-align:center">0x04
	* </td>
	* <td style="border:0px;background-color:#B6006D;width:32px;height:32px;color:#fff;text-align:center">0x05
	* </td>
	* <td style="border:0px;background-color:#B62400;width:32px;height:32px;color:#fff;text-align:center">0x06
	* </td>
	* <td style="border:0px;background-color:#914800;width:32px;height:32px;color:#fff;text-align:center">0x07
	* </td>
	* <td style="border:0px;background-color:#6D4800;width:32px;height:32px;color:#fff;text-align:center">0x08
	* </td>
	* <td style="border:0px;background-color:#244800;width:32px;height:32px;color:#fff;text-align:center">0x09
	* </td>
	* <td style="border:0px;background-color:#006D24;width:32px;height:32px;color:#fff;text-align:center">0x0A
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x0B
	* </td>
	* <td style="border:0px;background-color:#004848;width:32px;height:32px;color:#fff;text-align:center">0x0C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#B6B6B6;width:32px;height:32px;color:#fff;text-align:center">0x10
	* </td>
	* <td style="border:0px;background-color:#006DDA;width:32px;height:32px;color:#fff;text-align:center">0x11
	* </td>
	* <td style="border:0px;background-color:#0048FF;width:32px;height:32px;color:#fff;text-align:center">0x12
	* </td>
	* <td style="border:0px;background-color:#9100FF;width:32px;height:32px;color:#fff;text-align:center">0x13
	* </td>
	* <td style="border:0px;background-color:#B600FF;width:32px;height:32px;color:#fff;text-align:center">0x14
	* </td>
	* <td style="border:0px;background-color:#FF0091;width:32px;height:32px;color:#fff;text-align:center">0x15
	* </td>
	* <td style="border:0px;background-color:#FF0000;width:32px;height:32px;color:#fff;text-align:center">0x16
	* </td>
	* <td style="border:0px;background-color:#DA6D00;width:32px;height:32px;color:#fff;text-align:center">0x17
	* </td>
	* <td style="border:0px;background-color:#916D00;width:32px;height:32px;color:#fff;text-align:center">0x18
	* </td>
	* <td style="border:0px;background-color:#249100;width:32px;height:32px;color:#fff;text-align:center">0x19
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x1A
	* </td>
	* <td style="border:0px;background-color:#00B66D;width:32px;height:32px;color:#fff;text-align:center">0x1B
	* </td>
	* <td style="border:0px;background-color:#009191;width:32px;height:32px;color:#fff;text-align:center">0x1C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x20
	* </td>
	* <td style="border:0px;background-color:#6DB6FF;width:32px;height:32px;color:#000;text-align:center">0x21
	* </td>
	* <td style="border:0px;background-color:#9191FF;width:32px;height:32px;color:#000;text-align:center">0x22
	* </td>
	* <td style="border:0px;background-color:#DA6DFF;width:32px;height:32px;color:#000;text-align:center">0x23
	* </td>
	* <td style="border:0px;background-color:#FF00FF;width:32px;height:32px;color:#000;text-align:center">0x24
	* </td>
	* <td style="border:0px;background-color:#FF6DFF;width:32px;height:32px;color:#000;text-align:center">0x25
	* </td>
	* <td style="border:0px;background-color:#FF9100;width:32px;height:32px;color:#000;text-align:center">0x26
	* </td>
	* <td style="border:0px;background-color:#FFB600;width:32px;height:32px;color:#000;text-align:center">0x27
	* </td>
	* <td style="border:0px;background-color:#DADA00;width:32px;height:32px;color:#000;text-align:center">0x28
	* </td>
	* <td style="border:0px;background-color:#6DDA00;width:32px;height:32px;color:#000;text-align:center">0x29
	* </td>
	* <td style="border:0px;background-color:#00FF00;width:32px;height:32px;color:#000;text-align:center">0x2A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x2B
	* </td>
	* <td style="border:0px;background-color:#00FFFF;width:32px;height:32px;color:#000;text-align:center">0x2C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x2D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x30
	* </td>
	* <td style="border:0px;background-color:#B6DAFF;width:32px;height:32px;color:#000;text-align:center">0x31
	* </td>
	* <td style="border:0px;background-color:#DAB6FF;width:32px;height:32px;color:#000;text-align:center">0x32
	* </td>
	* <td style="border:0px;background-color:#FFB6FF;width:32px;height:32px;color:#000;text-align:center">0x33
	* </td>
	* <td style="border:0px;background-color:#FF91FF;width:32px;height:32px;color:#000;text-align:center">0x34
	* </td>
	* <td style="border:0px;background-color:#FFB6B6;width:32px;height:32px;color:#000;text-align:center">0x35
	* </td>
	* <td style="border:0px;background-color:#FFDA91;width:32px;height:32px;color:#000;text-align:center">0x36
	* </td>
	* <td style="border:0px;background-color:#FFFF48;width:32px;height:32px;color:#000;text-align:center">0x37
	* </td>
	* <td style="border:0px;background-color:#FFFF6D;width:32px;height:32px;color:#000;text-align:center">0x38
	* </td>
	* <td style="border:0px;background-color:#B6FF48;width:32px;height:32px;color:#000;text-align:center">0x39
	* </td>
	* <td style="border:0px;background-color:#91FF6D;width:32px;height:32px;color:#000;text-align:center">0x3A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x3B
	* </td>
	* <td style="border:0px;background-color:#91DAFF;width:32px;height:32px;color:#000;text-align:center">0x3C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x3D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3F
	* </td></tr></tbody></table>*/
    $setBackgroundPalettes(Byte[16] palettes) {
    	!	LDA ?$PPUSTATUS?    !
    	!	LDA #>$3F00         !
    	!	STA ?$PPUADDR?      !
    	!	LDA #<$3F00         !
    	!	STA ?$PPUADDR?      !
    	!	                    !
    	!	LDY #$00            !
    	!-loop:                 !
    	!	LDA (?palettes?), Y !
    	!	STA ?$PPUDATA?      !
    	!	INY                 !
    	!	CPY #$10            !
    	!	BNE -loop           !
    }
    
    /*
    * <p>Load the sprites palettes</p>
    * <h2>Parameters</h2>
    * <ul>
    * <li><b>palettes</b>: an array containing 16 colors from NES palette</li>
    * </ul>
    * <h2>NES palette colors</h2>
	* <table class="wikitable">
	* <tbody><tr>
	* <td style="border:0px;background-color:#6D6D6D;width:32px;height:32px;color:#fff;text-align:center">0x00
	* </td>
	* <td style="border:0px;background-color:#002491;width:32px;height:32px;color:#fff;text-align:center">0x01
	* </td>
	* <td style="border:0px;background-color:#0000DA;width:32px;height:32px;color:#fff;text-align:center">0x02
	* </td>
	* <td style="border:0px;background-color:#6D48DA;width:32px;height:32px;color:#fff;text-align:center">0x03
	* </td>
	* <td style="border:0px;background-color:#91006D;width:32px;height:32px;color:#fff;text-align:center">0x04
	* </td>
	* <td style="border:0px;background-color:#B6006D;width:32px;height:32px;color:#fff;text-align:center">0x05
	* </td>
	* <td style="border:0px;background-color:#B62400;width:32px;height:32px;color:#fff;text-align:center">0x06
	* </td>
	* <td style="border:0px;background-color:#914800;width:32px;height:32px;color:#fff;text-align:center">0x07
	* </td>
	* <td style="border:0px;background-color:#6D4800;width:32px;height:32px;color:#fff;text-align:center">0x08
	* </td>
	* <td style="border:0px;background-color:#244800;width:32px;height:32px;color:#fff;text-align:center">0x09
	* </td>
	* <td style="border:0px;background-color:#006D24;width:32px;height:32px;color:#fff;text-align:center">0x0A
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x0B
	* </td>
	* <td style="border:0px;background-color:#004848;width:32px;height:32px;color:#fff;text-align:center">0x0C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x0F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#B6B6B6;width:32px;height:32px;color:#fff;text-align:center">0x10
	* </td>
	* <td style="border:0px;background-color:#006DDA;width:32px;height:32px;color:#fff;text-align:center">0x11
	* </td>
	* <td style="border:0px;background-color:#0048FF;width:32px;height:32px;color:#fff;text-align:center">0x12
	* </td>
	* <td style="border:0px;background-color:#9100FF;width:32px;height:32px;color:#fff;text-align:center">0x13
	* </td>
	* <td style="border:0px;background-color:#B600FF;width:32px;height:32px;color:#fff;text-align:center">0x14
	* </td>
	* <td style="border:0px;background-color:#FF0091;width:32px;height:32px;color:#fff;text-align:center">0x15
	* </td>
	* <td style="border:0px;background-color:#FF0000;width:32px;height:32px;color:#fff;text-align:center">0x16
	* </td>
	* <td style="border:0px;background-color:#DA6D00;width:32px;height:32px;color:#fff;text-align:center">0x17
	* </td>
	* <td style="border:0px;background-color:#916D00;width:32px;height:32px;color:#fff;text-align:center">0x18
	* </td>
	* <td style="border:0px;background-color:#249100;width:32px;height:32px;color:#fff;text-align:center">0x19
	* </td>
	* <td style="border:0px;background-color:#009100;width:32px;height:32px;color:#fff;text-align:center">0x1A
	* </td>
	* <td style="border:0px;background-color:#00B66D;width:32px;height:32px;color:#fff;text-align:center">0x1B
	* </td>
	* <td style="border:0px;background-color:#009191;width:32px;height:32px;color:#fff;text-align:center">0x1C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x1F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x20
	* </td>
	* <td style="border:0px;background-color:#6DB6FF;width:32px;height:32px;color:#000;text-align:center">0x21
	* </td>
	* <td style="border:0px;background-color:#9191FF;width:32px;height:32px;color:#000;text-align:center">0x22
	* </td>
	* <td style="border:0px;background-color:#DA6DFF;width:32px;height:32px;color:#000;text-align:center">0x23
	* </td>
	* <td style="border:0px;background-color:#FF00FF;width:32px;height:32px;color:#000;text-align:center">0x24
	* </td>
	* <td style="border:0px;background-color:#FF6DFF;width:32px;height:32px;color:#000;text-align:center">0x25
	* </td>
	* <td style="border:0px;background-color:#FF9100;width:32px;height:32px;color:#000;text-align:center">0x26
	* </td>
	* <td style="border:0px;background-color:#FFB600;width:32px;height:32px;color:#000;text-align:center">0x27
	* </td>
	* <td style="border:0px;background-color:#DADA00;width:32px;height:32px;color:#000;text-align:center">0x28
	* </td>
	* <td style="border:0px;background-color:#6DDA00;width:32px;height:32px;color:#000;text-align:center">0x29
	* </td>
	* <td style="border:0px;background-color:#00FF00;width:32px;height:32px;color:#000;text-align:center">0x2A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x2B
	* </td>
	* <td style="border:0px;background-color:#00FFFF;width:32px;height:32px;color:#000;text-align:center">0x2C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x2D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x2F
	* </td></tr>
	* <tr>
	* <td style="border:0px;background-color:#FFFFFF;width:32px;height:32px;color:#000;text-align:center">0x30
	* </td>
	* <td style="border:0px;background-color:#B6DAFF;width:32px;height:32px;color:#000;text-align:center">0x31
	* </td>
	* <td style="border:0px;background-color:#DAB6FF;width:32px;height:32px;color:#000;text-align:center">0x32
	* </td>
	* <td style="border:0px;background-color:#FFB6FF;width:32px;height:32px;color:#000;text-align:center">0x33
	* </td>
	* <td style="border:0px;background-color:#FF91FF;width:32px;height:32px;color:#000;text-align:center">0x34
	* </td>
	* <td style="border:0px;background-color:#FFB6B6;width:32px;height:32px;color:#000;text-align:center">0x35
	* </td>
	* <td style="border:0px;background-color:#FFDA91;width:32px;height:32px;color:#000;text-align:center">0x36
	* </td>
	* <td style="border:0px;background-color:#FFFF48;width:32px;height:32px;color:#000;text-align:center">0x37
	* </td>
	* <td style="border:0px;background-color:#FFFF6D;width:32px;height:32px;color:#000;text-align:center">0x38
	* </td>
	* <td style="border:0px;background-color:#B6FF48;width:32px;height:32px;color:#000;text-align:center">0x39
	* </td>
	* <td style="border:0px;background-color:#91FF6D;width:32px;height:32px;color:#000;text-align:center">0x3A
	* </td>
	* <td style="border:0px;background-color:#48FFDA;width:32px;height:32px;color:#000;text-align:center">0x3B
	* </td>
	* <td style="border:0px;background-color:#91DAFF;width:32px;height:32px;color:#000;text-align:center">0x3C
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#f00;text-align:center">0x3D
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3E
	* </td>
	* <td style="border:0px;background-color:#000000;width:32px;height:32px;color:#fff;text-align:center">0x3F
	* </td></tr></tbody></table>*/
    $setSpritesPalettes(Byte[16] palettes) {
    	!	LDA ?$PPUSTATUS?    !
    	!	LDA #>$3F10         !
    	!	STA ?$PPUADDR?      !
    	!	LDA #<$3F10         !
    	!	STA ?$PPUADDR?      !
    	!	                    !
    	!	LDY #$00            !
    	!-loop:                 !
    	!	LDA (?palettes?), Y !
    	!	STA ?$PPUDATA?      !
    	!	INY                 !
    	!	CPY #$10            !
    	!	BNE -loop           !
    }
    
    $setNameTable(Int screen, Byte[960] nameTable) {
    	!	LDA ?$PPUSTATUS?     !
    	!	LDA ?screen? + 1     !
    	!	STA ?$PPUADDR?       !
    	!	LDA ?screen? + 0     !
    	!	STA ?$PPUADDR?       !
    	!	LDX #3               !
    	!	LDY #0               !
    	!-loop:                  !
    	!	LDA (?nameTable?), Y !
    	!	STA ?$PPUDATA?       !
    	!	INY                  !
    	!	BNE -loop            !
    	!	INC ?nameTable? + 1  !
    	!	DEX                  !
    	!	BNE -loop            !
    	!-frag:                  !
    	!	LDA (?nameTable?), Y !
    	!	STA ?$PPUDATA?       !
    	!	INY                  !
    	!	CPY #$C0             !
    	!	BNE -frag            !
    }
    
    $setNameTableTile(Int screen, Byte rowOffset, Byte colOffset, Byte tile) {
    	!	LDA ?$PPUSTATUS?           !
    	offset : rowOffset * 32 + colOffset
		!	CLC                        !
		!	LDA ?offset? + 0           !
		!	ADC ?screen? + 0           !
		!	STA ?screen? + 0           !
		!	LDA ?offset? + 1           !
		!	ADC ?screen? + 1           !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?screen? + 0           !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?tile?                 !
    	!	STA ?$PPUDATA?             !
    }
    
    $setNameTableTiles(Int screen, Byte rowOffset, Byte colOffset, Byte[][] tiles) {
    	offset : rowOffset * 32 + colOffset
    	!	LDA ?$PPUSTATUS?           !
    	screen += offset
    	!	LDX ?tiles.length?         !
    	!	BNE +loop                  !
    	!--loop:                       !
    	!	CLC                        !
    	!	LDA ?tiles? + 0            !
    	!	ADC ?tiles[0].length?      !
    	!	STA ?tiles? + 0            !
    	!	LDA ?tiles? + 1            !
    	!	ADC #0                     !
    	!	STA ?tiles? + 1            !
    	!	CLC                        !
    	!	LDA ?screen? + 0           !
    	!	ADC #?$SCREEN_WIDTH_TILES? !
    	!	STA ?screen? + 0           !
    	!	LDA ?screen? + 1           !
    	!	ADC #0                     !
    	!	STA ?screen? + 1           !
    	!+loop:                        !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?screen? + 0           !
    	!	STA ?$PPUADDR?             !
    	!	LDY #0                     !
    	!-loop:                        !
    	!	LDA (?tiles?), Y           !
    	!	STA ?$PPUDATA?             !
    	!	INY                        !
    	!	CPY ?tiles[0].length?      !
    	!	BNE -loop                  !
    	!	DEX                        !
    	!	BNE --loop                 !
    }
    
    $setNameTableRow(Int screen, Byte rowOffset, Byte[960] nameTable) {
    	offset : rowOffset * $SCREEN_WIDTH_TILES
    	!	LDA ?$PPUSTATUS?           !
    	!	CLC                        !
    	!	LDA ?offset? + 0           !
    	!	ADC ?nameTable? + 0        !
    	!	STA ?nameTable? + 0        !
    	!	LDA ?offset? + 1           !
    	!	ADC ?nameTable? + 1        !
		!	STA ?nameTable? + 1        !
    	!	CLC                        !
    	!	LDA ?offset? + 0           !
    	!	ADC ?screen? + 0           !
    	!	STA ?screen? + 0           !
    	!	LDA ?offset? + 1           !
    	!	ADC ?screen? + 1           !
    	!	STA ?screen? + 1           !
    	!	STA ?$PPUADDR?             !
    	!	LDA ?screen? + 0           !
    	!	STA ?$PPUADDR?             !
    	!	LDY #0                     !
    	!-loop:                        !
    	!	LDA (?nameTable?), Y       !
    	!	STA ?$PPUDATA?             !
    	!	INY                        !
    	!	CPY #?$SCREEN_WIDTH_TILES? !
    	!	BNE -loop                  !
    }
    
    $setNameTableColumn(Int screen, Byte colOffset, Byte[960] nameTable) {
    	!	LDY #0                      !
    	!	LDX #?$SCREEN_HEIGHT_TILES? !
    	!	LDA #%00000100              !
    	!	STA ?$PPUCTRL?              !
    	!	LDA ?$PPUSTATUS?            !
    	!	LDA ?screen? + 1            !
    	!	STA ?$PPUADDR?              !
    	!	LDA ?colOffset?             !
    	!	STA ?$PPUADDR?              !
    	!-loop:                         !
    	!	CLC                         !
    	!	ADC ?nameTable? + 0         !
    	!	STA ?nameTable? + 0         !
    	!	LDA #0                      !
    	!	ADC ?nameTable? + 1         !
    	!	STA ?nameTable? + 1         !
    	!	LDA (?nameTable?), Y        !
    	!	STA ?$PPUDATA?              !
    	!	LDA #?$SCREEN_WIDTH_TILES?  !
    	!	DEX                         !
    	!	BNE -loop                   !
    	!	LDA ?$ctrl?                 !
    	!	STA ?$PPUCTRL?              !
    }
    
    $setNameAndAttributeTable(Int screen, Byte[1024] nameAndAttributeTable) {
    	!	LDA ?$PPUSTATUS?                 !
    	!	LDA ?screen? + 1                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDA ?screen? + 0                 !
    	!	STA ?$PPUADDR?                   !
    	!	LDX #4                           !
    	!	LDY #0                           !
    	!-loop:                              !
    	!	LDA (?nameAndAttributeTable?), Y !
    	!	STA ?$PPUDATA?                   !
    	!	INY                              !
    	!	BNE -loop                        !
    	!	INC ?nameAndAttributeTable? + 1  !
    	!	DEX                              !
    	!	BNE -loop                        !
    }
    
    $setAttributeTable(Int screen, Byte[64] attributeTable) {
    	!	LDA ?$PPUSTATUS?             !
    	!	CLC                          !
    	!	LDA ?screen? + 1             !
    	!	ADC #>$03C0                  !
    	!	STA ?$PPUADDR?               !
    	!	LDA #<$03C0                  !
    	!	STA ?$PPUADDR?               !
    	!	LDY #0                       !
    	!-loop:                          !
    	!	LDA (?attributeTable?), Y    !
    	!	STA ?$PPUDATA?               !
    	!	INY                          !
    	!	CPY #?attributeTable.length? !
    	!	BNE -loop                    !
    }
    
    $setAttributeTableRow(Int screen, Byte rowOffset, Byte[64] attributeTable) {
    	!	LDA ?$PPUSTATUS?          !
		!	LDA ?rowOffset?           !
    	!	ASL A                     !
    	!	ASL A                     !
    	!	ASL A                     !
    	!	TAY                       !
    	!	CLC                       !
    	!	ADC #<$03C0               !
    	!	STA ?screen? + 0          !
    	!	LDA ?screen? + 1          !
    	!	ADC #>$03C0               !
    	!	STA ?$PPUADDR?            !
    	!	LDA ?screen? + 0          !
    	!	STA ?$PPUADDR?            !
    	!	LDX #8                    !
    	!-loop:                       !
    	!	LDA (?attributeTable?), Y !
    	!	STA ?$PPUDATA?            !
    	!	INY                       !
    	!	DEX                       !
    	!	BNE -loop                 !
    }
    
    $setAttributeTableColumn(Int screen, Byte colOffset, Byte[64] attributeTable) {
    	!	LDA ?$PPUSTATUS?          !
    	!	LDX #8                    !
		!	LDA ?colOffset?           !
    	!	TAY                       !
    	!	CLC                       !
    	!	ADC #<$03C0               !
    	!	STA ?screen? + 0          !
    	!	LDA ?screen? + 1          !
    	!	ADC #>$03C0               !
    	!	STA ?screen? + 1          !
    	!-loop:                       !
    	!	STA ?$PPUADDR?            !
    	!	LDA ?screen? + 0          !
    	!	STA ?$PPUADDR?            !
    	!	LDA (?attributeTable?), Y !
    	!	STA ?$PPUDATA?            !
    	!	DEX                       !
    	!	BEQ +done                 !
    	!	TYA                       !
    	!	ADC #8                    !
    	!	TAY                       !
    	!	LDA ?screen? + 0          !
    	!	ADC #8                    !
    	!	STA ?screen? + 0          !
    	!	LDA ?screen? + 1          !
    	!	BNE -loop                 !
    	!+done:                       !
    }
    
    $setAttribute(Int screen, Byte rowOffset, Byte colOffset, Byte attribute) {
    	!	LDA ?$PPUSTATUS? !
    	!	LDA ?rowOffset?  !
    	!	ASL A            !
    	!	ASL A            !
    	!	ASL A            !
    	!	CLC              !
    	!	ADC ?colOffset?  !
    	!	ADC #<$03C0      !
    	!	STA ?screen? + 0 !
    	!	LDA ?screen? + 1 !
    	!	ADC #>$03C0      !
    	!	STA ?$PPUADDR?   !
    	!	LDA ?screen? + 0 !
    	!	STA ?$PPUADDR?   !
    	!	LDA ?attribute?  !
    	!	STA ?$PPUDATA?   !
    }
    
    $currentScreen() {
    	current : $SCREEN_TOP_LEFT
    	!	LDA ?$ctrl?       !
    	!	AND #%00000011    !
    	!	ASL A             !
    	!	ASL A             !
    	!	CLC               !
    	!	ADC ?current? + 1 !
    	!	STA ?current? + 1 !
    	return current
    }
    
    $nextHorizontalScreen() {
    	next : $SCREEN_TOP_LEFT
    	!	LDA ?$ctrl?    !
    	!	AND #%00000011 !
    	!	EOR #%00000001 !
    	!	ASL A          !
    	!	ASL A          !
    	!	CLC            !
    	!	ADC ?next? + 1 !
    	!	STA ?next? + 1 !
    	return next
    }
    
    $nextVerticalScreen() {
    	next : $SCREEN_TOP_LEFT
    	!	LDA ?$ctrl?    !
    	!	AND #%00000011 !
    	!	EOR #%00000010 !
    	!	ASL A          !
    	!	ASL A          !
    	!	CLC            !
    	!	ADC ?next? + 1 !
    	!	STA ?next? + 1 !
    	return next
    }
    
    $swapScreensHorizontally() @Inline {
    	!	LDA ?$ctrl?    !
    	!	EOR #%00000001 !
    	!	STA ?$ctrl?    !
    }
    
    $swapScreensVertically() @Inline {
    	!	LDA ?$ctrl?    !
    	!	EOR #%00000010 !
    	!	STA ?$ctrl?    !
    }
    
    $waitVBlank() @Inline {
    	!-	BIT ?$PPUSTATUS? !
		!	BPL -            !
    }
    
    $turnOff() @Inline {
    	!	LDA #0         !
    	!	STA ?$PPUCTRL? !
    	!	STA ?$PPUMASK? !
    }
    
    $turnOn() @Inline {
    	!	LDA ?$ctrl?      !
    	!	STA ?$PPUCTRL?   !
    	!	LDA ?$mask?      !
    	!	STA ?$PPUMASK?   !
    }
    
    $update() @Inline {
    	!	LDA #0           !
    	!	STA ?$PPUADDR?   !
    	!	STA ?$PPUADDR?   !
		$updateCtrl
    	$updateMask
    	$updateScroll
    }
    
    $updateCtrl() @Inline {
    	!	LDA ?$ctrl?      !
    	!	STA ?$PPUCTRL?   !
    }
    
    $updateMask() @Inline {
    	!	LDA ?$mask?      !
    	!	STA ?$PPUMASK?   !
    }
    
    $updateScroll() @Inline {
    	!	LDA ?$scrollX?   !
    	!	STA ?$PPUSCROLL? !
    	!	LDA ?$scrollY?   !
    	!	STA ?$PPUSCROLL? !
    }
}