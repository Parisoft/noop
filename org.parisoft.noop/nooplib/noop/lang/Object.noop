/*
 * <p>The base class of all classes.</p>
 * <p>All non-Void non-Primitive classes inherits, directly or indirectly, the Object class</p>
 */
Object {

    /* 
     * <p>Compare two objects byte by byte.</p>
     * <h2>Returns:</h2>
     * <p>true if this object has the same bytes as other object</p>
     */
    equals(Object other) {
    	size()
        !	LDY #0           !
        !-equalsLoop:        !
        !	LDA (?this?), Y  !
        !	CMP (?other?), Y !
        !	BNE +notEquals   !
        !	INY              !
        !	CPY ?size()?.ret !
        !	BNE -equalsLoop  !
        return true
        !+notEquals:         !
        return false
    }
    
    /* 
     * <p>Compare the address in memory of two objects.</p>
     * <h2>Returns:</h2>
     * <p>true if this object is exactly the same object as other</p>
     */
    same(Object other) {
    	!	LDA ?this? + 0  !
    	!	CMP ?other? + 0 !
    	!	BNE +notSame    !
    	!	LDA ?this? + 1  !
    	!	CMP ?other? + 1 !
    	!	BNE +notSame    !
    	return true
    	!+notSame:          !
    	return false
    }
    
    /* 
     * <h2>Returns:</h2>
     * <p>the size in bytes of this object</p>
     */
    size() {
    	s : 0
    	!	LDY #0               !
    	!	LDA (?this?), Y      !
    	!	TAX                  !
    	!	LDA Object.$sizes, X !
    	!	STA ?s?              !
    	return s
    }
    
    //-- Arrays methods ---
    
    /* 
     * <h2>Returns:</h2>
     * <p>how many elements this array contains</p>
     */
    length() {
    	//native implementation
    	return UInt
    }
    
}