grammar org.parisoft.noop.Noop hidden(WS, ML_COMMENT, SL_COMMENT) // with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate noop "http://www.parisoft.org/noop/Noop"

NoopClass:
	name=CID ('extends' superClass=[NoopClass|CID])? '{' LF*
	members+=Member*
	'}' LF?;

Member:
	(Variable | Method) LF+;

Storage:
	type=StorageType ('[' location=Expression ']')?;

Variable:
	name=ID storage=Storage? ':' value=Expression;

Parameter returns Variable:
	type=[NoopClass|CID] (dimension+=Length)* name=ID storage=Storage?;

Method:
	name=ID '(' LF* (params+=Parameter LF* (',' LF* params+=Parameter LF*)*)? ')' storage=Storage? body=Block;

Block:
	{Block} '{' LF* statements+=Statement* '}';

Statement:
	(Variable |
	ReturnStatement |
	Expression |
	IfStatement |
	ForStatement |
	ForeverStatement |
	ContinueStatement |
	BreakStatement |
	AsmStatement) LF+;

ReturnStatement:
	name='return' (value=Expression)?;

IfStatement:
	name='if' '(' condition=Expression ')' body=Block else=ElseStatement?;

ElseStatement:
	name='else' (body=Block | if=IfStatement);

ForStatement:
	name='for' '(' ((variables+=Variable | assignments+=AssignmentExpression) (',' (variables+=Variable |
	assignments+=AssignmentExpression))*)?
	';' condition=Expression?
	';' (expressions+=Expression (',' expressions+=Expression)*)? ')'
	body=Block;

ForeverStatement:
	name='forever' body=Block;

ContinueStatement:
	name='continue';

BreakStatement:
	name='break';

AsmStatement:
	codes+=ASM_TO_ASM | (codes+=ASM_TO_VAR vars+=Expression (codes+=VAR_TO_VAR vars+=Expression)* codes+=VAR_TO_ASM);

Expression:
	AssignmentExpression;

AssignmentExpression returns Expression:
	LogicalExpression ({AssignmentExpression.left=current} LF* assignment=AssignmentType LF* right=LogicalExpression)*;

LogicalExpression returns Expression:
	BitwiseOrExpression (({OrExpression.left=current} LF* 'or' | {AndExpression.left=current} LF* 'and')
	LF* right=BitwiseOrExpression)*;

BitwiseOrExpression returns Expression:
	BitwiseAndExpression ({BOrExpression.left=current} LF* '|' LF* right=BitwiseAndExpression)*;

BitwiseAndExpression returns Expression:
	EqualityExpression ({BAndExpression.left=current} LF* '&' LF* right=EqualityExpression)*;

EqualityExpression returns Expression:
	RelationalExpression (({EqualsExpression.left=current} LF* '=' | {DifferExpression.left=current} LF* '#')
	LF* right=RelationalExpression)*;

RelationalExpression returns Expression:
	InstaceOfExpression
	(({GtExpression.left=current} LF* '>' |
	{GeExpression.left=current} LF* '>=' |
	{LtExpression.left=current} LF* '<' |
	{LeExpression.left=current} LF* '<=')
	LF* right=InstaceOfExpression)*;

InstaceOfExpression returns Expression:
	ShiftExpression ({InstanceOfExpression.left=current} 'instanceOf' type=[NoopClass|CID])?;

ShiftExpression returns Expression:
	AdditiveExpression (({LShiftExpression.left=current} LF* '<<' | {RShiftExpression.left=current} LF* '>>')
	LF* right=AdditiveExpression)*;

AdditiveExpression returns Expression:
	MultiplicativeExpression (=> ({AddExpression.left=current} LF* '+' | {SubExpression.left=current} LF* '-')
	LF* right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression:
	CastExpression (({MulExpression.left=current} LF* '*' | {DivExpression.left=current} LF* '/' |
	{ModExpression.left=current} LF* '%')
	LF* right=CastExpression)*;

CastExpression returns Expression:
	UnaryExpression ({CastExpression.left=current} 'as' type=[NoopClass|CID] dimension+=Index*)?;

UnaryExpression returns Expression:
	SelectionExpression |
	(({ComplementExpression} '~' |
	{NotExpression} 'not' |
	{SigNegExpression} '-' |
	{SigPosExpression} '+' |
	{DecExpression} '--' |
	{IncExpression} '++')
	right=UnaryExpression);

SelectionExpression returns Expression:
	TerminalExpression ({MemberSelect.receiver=current} LF* '.' LF*
	member=[Member] (hasArgs?='(' LF* (args+=Expression LF* (',' LF* args+=Expression LF*)*)? ')')? indexes+=Index*)*;

TerminalExpression returns Expression:
	{ByteLiteral} value=Byte |
	{BoolLiteral} value=BOOL |
	{StringLiteral} value=STRING |
	{ArrayLiteral} '[' LF* (values+=Expression LF* (',' LF* values+=Expression LF*)*)? ']' |
	{This} 'this' |
	{Super} 'super' |
	{NewInstance} type=[NoopClass|CID] (constructor=Constructor | dimension+=Index+)? |
	{MemberRef} member=[Member] (hasArgs?='(' LF* (args+=Expression LF* (',' LF* args+=Expression LF*)*)? ')')?
	indexes+=Index* |
	'(' Expression ')';

Constructor:
	{Constructor} '{' LF* (fields+=ConstructorField LF* (',' LF* fields+=ConstructorField LF*)*)? '}';

ConstructorField:
	variable=[Variable] ':' value=Expression;

Index:
	'[' value=Expression ']';

Length:
	{Length} '[' value=Expression? ']';

enum AssignmentType:
	ASSIGN=':=' | ADD_ASSIGN='+=' | SUB_ASSIGN='-=' | MUL_ASSIGN='*=' | DIV_ASSIGN='/=' | MOD_ASSIGN='%=' |
	BOR_ASSIGN='|=' | BAN_ASSIGN='&=' | BLS_ASSIGN='<<=' | BRS_ASSIGN='>>=';

enum StorageType:
	PRGROM='@PRG-ROM' | CHRROM='@CHR-ROM' | INESPRG='@INES-PRG' | INESCHR='@INES-CHR' | INESMAPPER='@INES-Mapper' |
	INESMIR='@INES-Mirror' | ZP='@ZP-RAM' | INLINE='@Inline' | RESET='@Reset' | NMI='@NMI' | IRQ='@IRQ';

terminal ASM_TO_VAR:
	'!' !('!' | '?')* '?';

terminal VAR_TO_VAR:
	'?' !('!' | '?')* '?';

terminal VAR_TO_ASM:
	'?' !('!' | '?')* '!';

terminal ASM_TO_ASM:
	'!' !('!' | '?')* '!';

Byte returns ecore::EIntegerObject:
	HEX | BIN | CHA | INT;

terminal CHA returns ecore::EChar:
	"'" (('\\' .) | !('\\' | "'")) "'";

terminal HEX returns ecore::EInt:
	'0x' ('0'..'9' | 'A'..'F')+;

terminal BIN returns ecore::EInt:
	'0b' ('0' | '1')+;

terminal BOOL returns ecore::EBoolean:
	'true' | 'false';

terminal ID:
	(('a'..'z') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*) | (('_' | '$') ('$')? ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')+); //  ('a'..'z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
terminal CID:
	('A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal LF:
	'\r'? '\n';

terminal STRING:
	'"' ('\\' . | !('\\' | '"'))* '"';

terminal ML_COMMENT:
	'/*'->('*/' ('\r'? '\n')*);

terminal SL_COMMENT:
	'//' !('\n' | '\r')*;

terminal WS:
	(' ' | '\t')+;
