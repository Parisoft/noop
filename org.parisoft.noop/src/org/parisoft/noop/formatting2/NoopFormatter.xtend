/*
 * generated by Xtext 2.12.0
 */
package org.parisoft.noop.formatting2

import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.parisoft.noop.noop.AssignmentExpression
import org.parisoft.noop.noop.Block
import org.parisoft.noop.noop.Method
import org.parisoft.noop.noop.NoopClass
import org.parisoft.noop.noop.NoopPackage
import org.parisoft.noop.noop.Storage
import org.parisoft.noop.noop.Variable
import org.parisoft.noop.noop.Statement
import org.parisoft.noop.noop.ArrayLiteral

class NoopFormatter extends AbstractFormatter2 {
	
//	@Inject extension NoopGrammarAccess

	def dispatch void format(NoopClass noopClass, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		noopClass.regionFor.keyword('extends').surround[oneSpace]
		noopClass.regionFor.keyword('{').prepend[oneSpace]
		
		interior(noopClass.regionFor.keyword('{'), noopClass.regionFor.keyword('}'))[indent] 
		
		noopClass.members.forEach[format]
	}
	
	def dispatch void format(Method method, extension IFormattableDocument document) {
		method.prepend[indent]
		method.body.format
	}
	
	def dispatch void format(Variable variable, extension IFormattableDocument document) {
		variable.prepend[indent]
		variable.regionFor.keyword(':').surround[
			indent
			oneSpace
		]
		variable.value.format
	}
	
	def dispatch void format(AssignmentExpression assignment, extension IFormattableDocument document) {
		assignment.regionFor.feature(NoopPackage.Literals.ASSIGNMENT_EXPRESSION__ASSIGNMENT).surround[
			indent		
			oneSpace 
		]
		assignment.right.format
	}
	
	def dispatch void format(ArrayLiteral array, extension IFormattableDocument document) {
		interior(array.regionFor.keyword('['), array.regionFor.keyword(']'))[indent]
		
		array.regionFor.keyword('[').prepend[indent]
		array.regionFor.keyword(',').prepend[
			indent
			noSpace
		].append[
			indent
			oneSpace
		]
		
		array.values.forEach[format]		
	}
	
	def dispatch void format(Block block, extension IFormattableDocument document) {
		block.regionFor.keyword('{').prepend[oneSpace]
		
		interior(block.regionFor.keyword('{'), block.regionFor.keyword('}'))[indent]
		
		block.statements.forEach[format]
	}
	
	def dispatch void format(Statement statement, extension IFormattableDocument document) {
		statement.prepend[indent]
	}

	def dispatch void format(Storage storage, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		storage.getLocation.format;
	}
	
	// TODO: implement for Variable, Method, Block, ReturnStatement, IfStatement, ElseStatement, ForStatement, ForeverStatement, AsmStatement, AssignmentExpression, BOrExpression, BAndExpression, CastExpression, MemberSelect, ArrayLiteral, NewInstance, MemberRef, Constructor, ConstructorField, Index, Length, OrExpression, AndExpression, EqualsExpression, DifferExpression, GtExpression, GeExpression, LtExpression, LeExpression, InstanceOfExpression, LShiftExpression, RShiftExpression, AddExpression, SubExpression, MulExpression, DivExpression, ModExpression
}
