/*
 * generated by Xtext 2.10.0
 */
package org.parisoft.noop.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.IResourceDescriptions
import org.parisoft.noop.^extension.Classes
import org.parisoft.noop.^extension.Members
import org.parisoft.noop.noop.NoopClass
import org.parisoft.noop.noop.NoopPackage
import org.parisoft.noop.^extension.TypeSystem

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class NoopGenerator extends AbstractGenerator {

	@Inject extension Classes
	@Inject extension Members
	@Inject extension MethodCompiler
	@Inject extension MetaDataCompiler
	@Inject IResourceDescriptions descriptions

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val asm = resource.compile

		if (asm !== null) {
			fsa.generateFile(asm.filename, asm.content)
		}
	}

	private def compile(Resource resource) {
		val game = resource.gameClass

		if (game === null||true) {
			return null
		}

		val header = game.inheritedFields.filter[typeOf.isNESHeader].head
		val main = game.inheritedMethods.findFirst[name == "main" && params.isEmpty]
		val metadata = new MetaData(header)
		
		main.alloc(metadata)
		val content = metadata.compile


		new ASM('''«game.name».asm''', content.toString)
	}

	private def gameClass(Resource resource) {
		val games = descriptions.allResourceDescriptions.map [
			getExportedObjectsByType(NoopPackage::eINSTANCE.noopClass)
		].flatten.map [
			var obj = it.EObjectOrProxy

			if (obj.eIsProxy) {
				obj = resource.resourceSet.getEObject(it.EObjectURI, true)
			}

			obj as NoopClass
		].filter [
			it.isGame && it.name != TypeSystem::LIB_GAME
		].toSet

		if (games.size > 1) {
			throw new IllegalArgumentException("More than 1 game implementation found: " + games.map[name])
		}

		return games.head
	}
}
